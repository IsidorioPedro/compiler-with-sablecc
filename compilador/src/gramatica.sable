Package compilador;

Helpers
    ascii = [0 .. 127];  
    ht = 09; // Horizontal Tab
    lf = 10; // Line Feed
    cr = 13; // Carriage Return
    sp = 32; // Space

    eol = cr lf | cr | lf;
    caracteres = [ascii - [lf + cr]];
    
    minusculas = ['a' .. 'z'];
    maiusculas = ['A' .. 'Z'];
    letra = minusculas | maiusculas;
    digito = ['0' .. '9'];

    vacuo = (sp | ht | eol)+;
    
    sem_fecha_chave = [ascii - '}'];

    comentario_linha = '#' caracteres* eol;
    comentario_bloco = '{' sem_fecha_chave* '}';
    comentario = comentario_linha | comentario_bloco;

    caractere_multiplo = '\b' | '\t' | '\n' | '\f' | '\r' | '\"' | '\' ''' | '\\';
    caractere_singular = [caracteres - [''' + '\']];
    caractere_texto = [caracteres - ['"' + '\']] | caractere_multiplo;
 
Tokens
    /* tokens a serem ignorados */
    vacuo = vacuo;
    comentario = comentario;
    
    /* palavras reservadas */
    inicio_execucao = '->';
    inicio = 'inicio';
    fim = 'fim';
    
    tipo_caractere = 'caractere';
    tipo_numero = 'numero';
    tipo_booleano = 'booleano';
    tipo_vetor = 'vetor';
    tipo_vazio = 'vazio';
    
    se = 'se';
    senao = 'senao';
    para = 'para';
    para_cada = 'para cada';
    enquanto = 'enquanto';
    retorne = 'retorne';
    
    /* operadores e divisores */
    ponto = '.';
    dois_pontos = ':';
    virgula = ',';
    ponto_virgula = ';';
    barra_reta = '|';
    abre_parentese = '(';
    fecha_parentese = ')';
    abre_colchete = '[';
    fecha_colchete = ']';
    
    soma = '+';
    menos = '-';
    divisao = '/';
    multiplicacao = '*';
    mod = '%';
    
    igual = '=';
    maior = '>';
    menor = '<';
    atribuicao = ':=';
    maior_igual = '>=';
    menor_igual = '<=';

    e = 'e';
    ou = 'ou';
    nao = 'nao';
    
    /* procedimentos primitivos*/
    ler = 'ler';
    exibir = 'exibir';

    /* identificadores */
    caractere = ''' (caractere_singular | caractere_multiplo) ''';
    texto = '"' caractere_texto* '"';

    numero = '-'? digito+ | '-'? digito+ ',' digito+;
    
    booleano = 'verdadeiro' | 'falso';
    
	id = letra (letra | digito | '_')*;
    /*
    vetor_declaracao = tipo_numero | tipo_booleano | tipo_caractere;
    vetor_unidimensional = vetor_declaracao id abre_colchete inteiro fecha_colchete;
    vetor_multidimensional = vetor_declaracao id (abre_colchete inteiro fecha_colchete)+;
    vetor_caractere = tipo_caractere id abre_colchete inteiro fecha_colchete '=' string;

    vetor = vetor_caractere | vetor_unidimensional | vetor_multidimensional;
    */

Ignored Tokens
    comentario,
    vacuo;

Productions

 /* Expressão aritmetica */
 expr =
   {fator} fator 
  |{soma} expr soma fator 
  |{menos} expr menos fator;

 /* Efeito cascata da expressão aritmetica */
 fator =
   {compara} expr_comparacao
  |{multi} fator multiplicacao expr_comparacao 
  |{div} fator divisao expr_comparacao 
  |{mod} fator mod expr_comparacao;
 
 /* Expressão Comparação */ 
 expr_comparacao = 
   {logica} expr_logica
  |{comparacao} expr_comparacao op_comp expr_logica;
 
 /* Expressão Logica */
 expr_logica =
   {termo} termo
  |{logica} expr_logica op_logica termo
  |{neglogica} nao termo;
 
 /* Estado Terminal das expressões */
 termo =
   {caractere} caractere
  |{numero} numero 
  |{booleano} booleano
  |{var} var
  |{chamada} chamada
  |{par} abre_parentese expr fecha_parentese;
 
 /* Variavel */
 var =
   {id} id
  |{vetor} var abre_colchete expr fecha_colchete;
 
 /* Chamada de função */
 chamada =
   {funcao} id abre_parentese lista_expr fecha_parentese;
 
 /* Lista de expressões para a função */
 lista_expr = 
   {vazio}
  |{expressao} expr
  |{expressaomais} barra_reta expr;
 
 /* Operadores de Comparação */
 op_comp =
 	{menorque} menor
   |{maiorque} maior
   |{maiorigual} maior_igual
   |{menorigual} menor_igual
   |{igualdade} igual;
 
 /* Operadores de Logica */
 op_logica =
    {ou} ou
   |{e} e;
