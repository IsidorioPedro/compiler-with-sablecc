/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import java.util.*;
import compilador.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPExpr().apply(this);
        outStart(node);
    }

    public void inAFatorExpr(AFatorExpr node)
    {
        defaultIn(node);
    }

    public void outAFatorExpr(AFatorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorExpr(AFatorExpr node)
    {
        inAFatorExpr(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorExpr(node);
    }

    public void inASomaExpr(ASomaExpr node)
    {
        defaultIn(node);
    }

    public void outASomaExpr(ASomaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExpr(ASomaExpr node)
    {
        inASomaExpr(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outASomaExpr(node);
    }

    public void inAMenosExpr(AMenosExpr node)
    {
        defaultIn(node);
    }

    public void outAMenosExpr(AMenosExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpr(AMenosExpr node)
    {
        inAMenosExpr(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAMenosExpr(node);
    }

    public void inAComparaFator(AComparaFator node)
    {
        defaultIn(node);
    }

    public void outAComparaFator(AComparaFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparaFator(AComparaFator node)
    {
        inAComparaFator(node);
        if(node.getExprComparacao() != null)
        {
            node.getExprComparacao().apply(this);
        }
        outAComparaFator(node);
    }

    public void inAMultiFator(AMultiFator node)
    {
        defaultIn(node);
    }

    public void outAMultiFator(AMultiFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiFator(AMultiFator node)
    {
        inAMultiFator(node);
        if(node.getExprComparacao() != null)
        {
            node.getExprComparacao().apply(this);
        }
        if(node.getMultiplicacao() != null)
        {
            node.getMultiplicacao().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAMultiFator(node);
    }

    public void inADivFator(ADivFator node)
    {
        defaultIn(node);
    }

    public void outADivFator(ADivFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFator(ADivFator node)
    {
        inADivFator(node);
        if(node.getExprComparacao() != null)
        {
            node.getExprComparacao().apply(this);
        }
        if(node.getDivisao() != null)
        {
            node.getDivisao().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outADivFator(node);
    }

    public void inAModFator(AModFator node)
    {
        defaultIn(node);
    }

    public void outAModFator(AModFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFator(AModFator node)
    {
        inAModFator(node);
        if(node.getExprComparacao() != null)
        {
            node.getExprComparacao().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAModFator(node);
    }

    public void inALogicaExprComparacao(ALogicaExprComparacao node)
    {
        defaultIn(node);
    }

    public void outALogicaExprComparacao(ALogicaExprComparacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicaExprComparacao(ALogicaExprComparacao node)
    {
        inALogicaExprComparacao(node);
        if(node.getExprLogica() != null)
        {
            node.getExprLogica().apply(this);
        }
        outALogicaExprComparacao(node);
    }

    public void inAComparacaoExprComparacao(AComparacaoExprComparacao node)
    {
        defaultIn(node);
    }

    public void outAComparacaoExprComparacao(AComparacaoExprComparacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparacaoExprComparacao(AComparacaoExprComparacao node)
    {
        inAComparacaoExprComparacao(node);
        if(node.getExprLogica() != null)
        {
            node.getExprLogica().apply(this);
        }
        if(node.getOpComp() != null)
        {
            node.getOpComp().apply(this);
        }
        if(node.getExprComparacao() != null)
        {
            node.getExprComparacao().apply(this);
        }
        outAComparacaoExprComparacao(node);
    }

    public void inATermoExprLogica(ATermoExprLogica node)
    {
        defaultIn(node);
    }

    public void outATermoExprLogica(ATermoExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExprLogica(ATermoExprLogica node)
    {
        inATermoExprLogica(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoExprLogica(node);
    }

    public void inALogicaExprLogica(ALogicaExprLogica node)
    {
        defaultIn(node);
    }

    public void outALogicaExprLogica(ALogicaExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicaExprLogica(ALogicaExprLogica node)
    {
        inALogicaExprLogica(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getOpLogica() != null)
        {
            node.getOpLogica().apply(this);
        }
        if(node.getExprLogica() != null)
        {
            node.getExprLogica().apply(this);
        }
        outALogicaExprLogica(node);
    }

    public void inANeglogicaExprLogica(ANeglogicaExprLogica node)
    {
        defaultIn(node);
    }

    public void outANeglogicaExprLogica(ANeglogicaExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeglogicaExprLogica(ANeglogicaExprLogica node)
    {
        inANeglogicaExprLogica(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        outANeglogicaExprLogica(node);
    }

    public void inACaractereTermo(ACaractereTermo node)
    {
        defaultIn(node);
    }

    public void outACaractereTermo(ACaractereTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTermo(ACaractereTermo node)
    {
        inACaractereTermo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereTermo(node);
    }

    public void inANumeroTermo(ANumeroTermo node)
    {
        defaultIn(node);
    }

    public void outANumeroTermo(ANumeroTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroTermo(ANumeroTermo node)
    {
        inANumeroTermo(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumeroTermo(node);
    }

    public void inABooleanoTermo(ABooleanoTermo node)
    {
        defaultIn(node);
    }

    public void outABooleanoTermo(ABooleanoTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoTermo(ABooleanoTermo node)
    {
        inABooleanoTermo(node);
        if(node.getBooleano() != null)
        {
            node.getBooleano().apply(this);
        }
        outABooleanoTermo(node);
    }

    public void inAVarTermo(AVarTermo node)
    {
        defaultIn(node);
    }

    public void outAVarTermo(AVarTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarTermo(AVarTermo node)
    {
        inAVarTermo(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarTermo(node);
    }

    public void inAChamadaTermo(AChamadaTermo node)
    {
        defaultIn(node);
    }

    public void outAChamadaTermo(AChamadaTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaTermo(AChamadaTermo node)
    {
        inAChamadaTermo(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAChamadaTermo(node);
    }

    public void inAParTermo(AParTermo node)
    {
        defaultIn(node);
    }

    public void outAParTermo(AParTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParTermo(AParTermo node)
    {
        inAParTermo(node);
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        outAParTermo(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVar(node);
    }

    public void inAVetorVar(AVetorVar node)
    {
        defaultIn(node);
    }

    public void outAVetorVar(AVetorVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVar(AVetorVar node)
    {
        inAVetorVar(node);
        if(node.getFechaColchete() != null)
        {
            node.getFechaColchete().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAbreColchete() != null)
        {
            node.getAbreColchete().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVetorVar(node);
    }

    public void inAFuncaoChamada(AFuncaoChamada node)
    {
        defaultIn(node);
    }

    public void outAFuncaoChamada(AFuncaoChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoChamada(AFuncaoChamada node)
    {
        inAFuncaoChamada(node);
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getListaExpr() != null)
        {
            node.getListaExpr().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFuncaoChamada(node);
    }

    public void inAVazioListaExpr(AVazioListaExpr node)
    {
        defaultIn(node);
    }

    public void outAVazioListaExpr(AVazioListaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioListaExpr(AVazioListaExpr node)
    {
        inAVazioListaExpr(node);
        outAVazioListaExpr(node);
    }

    public void inAExpressaoListaExpr(AExpressaoListaExpr node)
    {
        defaultIn(node);
    }

    public void outAExpressaoListaExpr(AExpressaoListaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoListaExpr(AExpressaoListaExpr node)
    {
        inAExpressaoListaExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExpressaoListaExpr(node);
    }

    public void inAExpressaomaisListaExpr(AExpressaomaisListaExpr node)
    {
        defaultIn(node);
    }

    public void outAExpressaomaisListaExpr(AExpressaomaisListaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaomaisListaExpr(AExpressaomaisListaExpr node)
    {
        inAExpressaomaisListaExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getBarraReta() != null)
        {
            node.getBarraReta().apply(this);
        }
        outAExpressaomaisListaExpr(node);
    }

    public void inAMenorqueOpComp(AMenorqueOpComp node)
    {
        defaultIn(node);
    }

    public void outAMenorqueOpComp(AMenorqueOpComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorqueOpComp(AMenorqueOpComp node)
    {
        inAMenorqueOpComp(node);
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        outAMenorqueOpComp(node);
    }

    public void inAMaiorqueOpComp(AMaiorqueOpComp node)
    {
        defaultIn(node);
    }

    public void outAMaiorqueOpComp(AMaiorqueOpComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorqueOpComp(AMaiorqueOpComp node)
    {
        inAMaiorqueOpComp(node);
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        outAMaiorqueOpComp(node);
    }

    public void inAMaiorigualOpComp(AMaiorigualOpComp node)
    {
        defaultIn(node);
    }

    public void outAMaiorigualOpComp(AMaiorigualOpComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorigualOpComp(AMaiorigualOpComp node)
    {
        inAMaiorigualOpComp(node);
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        outAMaiorigualOpComp(node);
    }

    public void inAMenorigualOpComp(AMenorigualOpComp node)
    {
        defaultIn(node);
    }

    public void outAMenorigualOpComp(AMenorigualOpComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorigualOpComp(AMenorigualOpComp node)
    {
        inAMenorigualOpComp(node);
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        outAMenorigualOpComp(node);
    }

    public void inAIgualdadeOpComp(AIgualdadeOpComp node)
    {
        defaultIn(node);
    }

    public void outAIgualdadeOpComp(AIgualdadeOpComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualdadeOpComp(AIgualdadeOpComp node)
    {
        inAIgualdadeOpComp(node);
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        outAIgualdadeOpComp(node);
    }

    public void inAOuOpLogica(AOuOpLogica node)
    {
        defaultIn(node);
    }

    public void outAOuOpLogica(AOuOpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuOpLogica(AOuOpLogica node)
    {
        inAOuOpLogica(node);
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        outAOuOpLogica(node);
    }

    public void inAEOpLogica(AEOpLogica node)
    {
        defaultIn(node);
    }

    public void outAEOpLogica(AEOpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEOpLogica(AEOpLogica node)
    {
        inAEOpLogica(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAEOpLogica(node);
    }
}
