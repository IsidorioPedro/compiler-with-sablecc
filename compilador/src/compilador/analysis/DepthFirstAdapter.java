/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import java.util.*;
import compilador.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAInicioPrograma(AInicioPrograma node)
    {
        defaultIn(node);
    }

    public void outAInicioPrograma(AInicioPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInicioPrograma(AInicioPrograma node)
    {
        inAInicioPrograma(node);
        if(node.getDecVarMais() != null)
        {
            node.getDecVarMais().apply(this);
        }
        outAInicioPrograma(node);
    }

    public void inADeclDecVariavel(ADeclDecVariavel node)
    {
        defaultIn(node);
    }

    public void outADeclDecVariavel(ADeclDecVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclDecVariavel(ADeclDecVariavel node)
    {
        inADeclDecVariavel(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getListaNomes() != null)
        {
            node.getListaNomes().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outADeclDecVariavel(node);
    }

    public void inAIdListaNomes(AIdListaNomes node)
    {
        defaultIn(node);
    }

    public void outAIdListaNomes(AIdListaNomes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdListaNomes(AIdListaNomes node)
    {
        inAIdListaNomes(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdListaNomes(node);
    }

    public void inAIdmaisListaNomes(AIdmaisListaNomes node)
    {
        defaultIn(node);
    }

    public void outAIdmaisListaNomes(AIdmaisListaNomes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdmaisListaNomes(AIdmaisListaNomes node)
    {
        inAIdmaisListaNomes(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getListaNomes() != null)
        {
            node.getListaNomes().apply(this);
        }
        outAIdmaisListaNomes(node);
    }

    public void inABaseTipo(ABaseTipo node)
    {
        defaultIn(node);
    }

    public void outABaseTipo(ABaseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaseTipo(ABaseTipo node)
    {
        inABaseTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outABaseTipo(node);
    }

    public void inAVetorTipo(AVetorTipo node)
    {
        defaultIn(node);
    }

    public void outAVetorTipo(AVetorTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorTipo(AVetorTipo node)
    {
        inAVetorTipo(node);
        if(node.getTipoVetor() != null)
        {
            node.getTipoVetor().apply(this);
        }
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAVetorTipo(node);
    }

    public void inAExprTipo(AExprTipo node)
    {
        defaultIn(node);
    }

    public void outAExprTipo(AExprTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprTipo(AExprTipo node)
    {
        inAExprTipo(node);
        if(node.getAbreColchete() != null)
        {
            node.getAbreColchete().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getFechaColchete() != null)
        {
            node.getFechaColchete().apply(this);
        }
        outAExprTipo(node);
    }

    public void inAExprmaisTipo(AExprmaisTipo node)
    {
        defaultIn(node);
    }

    public void outAExprmaisTipo(AExprmaisTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprmaisTipo(AExprmaisTipo node)
    {
        inAExprmaisTipo(node);
        if(node.getAbreColchete() != null)
        {
            node.getAbreColchete().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getFechaColchete() != null)
        {
            node.getFechaColchete().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAExprmaisTipo(node);
    }

    public void inACominicioDecFuncao(ACominicioDecFuncao node)
    {
        defaultIn(node);
    }

    public void outACominicioDecFuncao(ACominicioDecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACominicioDecFuncao(ACominicioDecFuncao node)
    {
        inACominicioDecFuncao(node);
        if(node.getInicioExecucao() != null)
        {
            node.getInicioExecucao().apply(this);
        }
        if(node.getTipoRetorno() != null)
        {
            node.getTipoRetorno().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outACominicioDecFuncao(node);
    }

    public void inASeminicioDecFuncao(ASeminicioDecFuncao node)
    {
        defaultIn(node);
    }

    public void outASeminicioDecFuncao(ASeminicioDecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeminicioDecFuncao(ASeminicioDecFuncao node)
    {
        inASeminicioDecFuncao(node);
        if(node.getTipoRetorno() != null)
        {
            node.getTipoRetorno().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outASeminicioDecFuncao(node);
    }

    public void inAVazioParametros(AVazioParametros node)
    {
        defaultIn(node);
    }

    public void outAVazioParametros(AVazioParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioParametros(AVazioParametros node)
    {
        inAVazioParametros(node);
        outAVazioParametros(node);
    }

    public void inAParamParametros(AParamParametros node)
    {
        defaultIn(node);
    }

    public void outAParamParametros(AParamParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamParametros(AParamParametros node)
    {
        inAParamParametros(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAParamParametros(node);
    }

    public void inAParamaisParametros(AParamaisParametros node)
    {
        defaultIn(node);
    }

    public void outAParamaisParametros(AParamaisParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamaisParametros(AParamaisParametros node)
    {
        inAParamaisParametros(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        if(node.getBarraReta() != null)
        {
            node.getBarraReta().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        outAParamaisParametros(node);
    }

    public void inAParametParametro(AParametParametro node)
    {
        defaultIn(node);
    }

    public void outAParametParametro(AParametParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametParametro(AParametParametro node)
    {
        inAParametParametro(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAParametParametro(node);
    }

    public void inABlocoBloco(ABlocoBloco node)
    {
        defaultIn(node);
    }

    public void outABlocoBloco(ABlocoBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoBloco(ABlocoBloco node)
    {
        inABlocoBloco(node);
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getDecVarMais() != null)
        {
            node.getDecVarMais().apply(this);
        }
        if(node.getComMais() != null)
        {
            node.getComMais().apply(this);
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        outABlocoBloco(node);
    }

    public void inAVarDecVarMais(AVarDecVarMais node)
    {
        defaultIn(node);
    }

    public void outAVarDecVarMais(AVarDecVarMais node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecVarMais(AVarDecVarMais node)
    {
        inAVarDecVarMais(node);
        if(node.getDecVariavel() != null)
        {
            node.getDecVariavel().apply(this);
        }
        outAVarDecVarMais(node);
    }

    public void inAVarmaisDecVarMais(AVarmaisDecVarMais node)
    {
        defaultIn(node);
    }

    public void outAVarmaisDecVarMais(AVarmaisDecVarMais node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarmaisDecVarMais(AVarmaisDecVarMais node)
    {
        inAVarmaisDecVarMais(node);
        if(node.getDecVariavel() != null)
        {
            node.getDecVariavel().apply(this);
        }
        if(node.getDecVarMais() != null)
        {
            node.getDecVarMais().apply(this);
        }
        outAVarmaisDecVarMais(node);
    }

    public void inAFunDecFunMais(AFunDecFunMais node)
    {
        defaultIn(node);
    }

    public void outAFunDecFunMais(AFunDecFunMais node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunDecFunMais(AFunDecFunMais node)
    {
        inAFunDecFunMais(node);
        if(node.getDecFuncao() != null)
        {
            node.getDecFuncao().apply(this);
        }
        outAFunDecFunMais(node);
    }

    public void inAFunmaisDecFunMais(AFunmaisDecFunMais node)
    {
        defaultIn(node);
    }

    public void outAFunmaisDecFunMais(AFunmaisDecFunMais node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunmaisDecFunMais(AFunmaisDecFunMais node)
    {
        inAFunmaisDecFunMais(node);
        if(node.getDecFuncao() != null)
        {
            node.getDecFuncao().apply(this);
        }
        if(node.getDecFunMais() != null)
        {
            node.getDecFunMais().apply(this);
        }
        outAFunmaisDecFunMais(node);
    }

    public void inAComandoComMais(AComandoComMais node)
    {
        defaultIn(node);
    }

    public void outAComandoComMais(AComandoComMais node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoComMais(AComandoComMais node)
    {
        inAComandoComMais(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAComandoComMais(node);
    }

    public void inAComandomaisComMais(AComandomaisComMais node)
    {
        defaultIn(node);
    }

    public void outAComandomaisComMais(AComandomaisComMais node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandomaisComMais(AComandomaisComMais node)
    {
        inAComandomaisComMais(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getComMais() != null)
        {
            node.getComMais().apply(this);
        }
        outAComandomaisComMais(node);
    }

    public void inAAtribAtrib(AAtribAtrib node)
    {
        defaultIn(node);
    }

    public void outAAtribAtrib(AAtribAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribAtrib(AAtribAtrib node)
    {
        inAAtribAtrib(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAtribAtrib(node);
    }

    public void inAListaatribListaAtrib(AListaatribListaAtrib node)
    {
        defaultIn(node);
    }

    public void outAListaatribListaAtrib(AListaatribListaAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaatribListaAtrib(AListaatribListaAtrib node)
    {
        inAListaatribListaAtrib(node);
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        outAListaatribListaAtrib(node);
    }

    public void inAListaatribmaisListaAtrib(AListaatribmaisListaAtrib node)
    {
        defaultIn(node);
    }

    public void outAListaatribmaisListaAtrib(AListaatribmaisListaAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaatribmaisListaAtrib(AListaatribmaisListaAtrib node)
    {
        inAListaatribmaisListaAtrib(node);
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getListaAtrib() != null)
        {
            node.getListaAtrib().apply(this);
        }
        outAListaatribmaisListaAtrib(node);
    }

    public void inAIfcomelseComando(AIfcomelseComando node)
    {
        defaultIn(node);
    }

    public void outAIfcomelseComando(AIfcomelseComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfcomelseComando(AIfcomelseComando node)
    {
        inAIfcomelseComando(node);
        if(node.getDecCasam() != null)
        {
            node.getDecCasam().apply(this);
        }
        outAIfcomelseComando(node);
    }

    public void inAIfsemelseComando(AIfsemelseComando node)
    {
        defaultIn(node);
    }

    public void outAIfsemelseComando(AIfsemelseComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfsemelseComando(AIfsemelseComando node)
    {
        inAIfsemelseComando(node);
        if(node.getDecSemCasam() != null)
        {
            node.getDecSemCasam().apply(this);
        }
        outAIfsemelseComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getExprRelacional() != null)
        {
            node.getExprRelacional().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getAuxListaAtrib() != null)
        {
            node.getAuxListaAtrib().apply(this);
        }
        if(node.getExprRelacional() != null)
        {
            node.getExprRelacional().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getListaAtrib() != null)
        {
            node.getListaAtrib().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAParaComando(node);
    }

    public void inAParacadaComando(AParacadaComando node)
    {
        defaultIn(node);
    }

    public void outAParacadaComando(AParacadaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParacadaComando(AParacadaComando node)
    {
        inAParacadaComando(node);
        if(node.getParaCada() != null)
        {
            node.getParaCada().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getAuxId() != null)
        {
            node.getAuxId().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAParacadaComando(node);
    }

    public void inAComandoatribComando(AComandoatribComando node)
    {
        defaultIn(node);
    }

    public void outAComandoatribComando(AComandoatribComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoatribComando(AComandoatribComando node)
    {
        inAComandoatribComando(node);
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outAComandoatribComando(node);
    }

    public void inARetorneComando(ARetorneComando node)
    {
        defaultIn(node);
    }

    public void outARetorneComando(ARetorneComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetorneComando(ARetorneComando node)
    {
        inARetorneComando(node);
        if(node.getAuxRetorne() != null)
        {
            node.getAuxRetorne().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outARetorneComando(node);
    }

    public void inABlocoComando(ABlocoComando node)
    {
        defaultIn(node);
    }

    public void outABlocoComando(ABlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        inABlocoComando(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoComando(node);
    }

    public void inAChamadaComando(AChamadaComando node)
    {
        defaultIn(node);
    }

    public void outAChamadaComando(AChamadaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaComando(AChamadaComando node)
    {
        inAChamadaComando(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outAChamadaComando(node);
    }

    public void inAEnquantoOutro(AEnquantoOutro node)
    {
        defaultIn(node);
    }

    public void outAEnquantoOutro(AEnquantoOutro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoOutro(AEnquantoOutro node)
    {
        inAEnquantoOutro(node);
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getExprRelacional() != null)
        {
            node.getExprRelacional().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAEnquantoOutro(node);
    }

    public void inAParaOutro(AParaOutro node)
    {
        defaultIn(node);
    }

    public void outAParaOutro(AParaOutro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaOutro(AParaOutro node)
    {
        inAParaOutro(node);
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getAuxListaAtrib() != null)
        {
            node.getAuxListaAtrib().apply(this);
        }
        if(node.getExprRelacional() != null)
        {
            node.getExprRelacional().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getListaAtrib() != null)
        {
            node.getListaAtrib().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAParaOutro(node);
    }

    public void inAParacadaOutro(AParacadaOutro node)
    {
        defaultIn(node);
    }

    public void outAParacadaOutro(AParacadaOutro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParacadaOutro(AParacadaOutro node)
    {
        inAParacadaOutro(node);
        if(node.getParaCada() != null)
        {
            node.getParaCada().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getAuxId() != null)
        {
            node.getAuxId().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAParacadaOutro(node);
    }

    public void inAComandoatribOutro(AComandoatribOutro node)
    {
        defaultIn(node);
    }

    public void outAComandoatribOutro(AComandoatribOutro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoatribOutro(AComandoatribOutro node)
    {
        inAComandoatribOutro(node);
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outAComandoatribOutro(node);
    }

    public void inARetorneOutro(ARetorneOutro node)
    {
        defaultIn(node);
    }

    public void outARetorneOutro(ARetorneOutro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetorneOutro(ARetorneOutro node)
    {
        inARetorneOutro(node);
        if(node.getAuxRetorne() != null)
        {
            node.getAuxRetorne().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outARetorneOutro(node);
    }

    public void inABlocoOutro(ABlocoOutro node)
    {
        defaultIn(node);
    }

    public void outABlocoOutro(ABlocoOutro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoOutro(ABlocoOutro node)
    {
        inABlocoOutro(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoOutro(node);
    }

    public void inAChamadaOutro(AChamadaOutro node)
    {
        defaultIn(node);
    }

    public void outAChamadaOutro(AChamadaOutro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaOutro(AChamadaOutro node)
    {
        inAChamadaOutro(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outAChamadaOutro(node);
    }

    public void inAIfelseDecCasam(AIfelseDecCasam node)
    {
        defaultIn(node);
    }

    public void outAIfelseDecCasam(AIfelseDecCasam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfelseDecCasam(AIfelseDecCasam node)
    {
        inAIfelseDecCasam(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getExprRelacional() != null)
        {
            node.getExprRelacional().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getDecCasam() != null)
        {
            node.getDecCasam().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAIfelseDecCasam(node);
    }

    public void inAOutraDecCasam(AOutraDecCasam node)
    {
        defaultIn(node);
    }

    public void outAOutraDecCasam(AOutraDecCasam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOutraDecCasam(AOutraDecCasam node)
    {
        inAOutraDecCasam(node);
        if(node.getOutro() != null)
        {
            node.getOutro().apply(this);
        }
        outAOutraDecCasam(node);
    }

    public void inAIfDecSemCasam(AIfDecSemCasam node)
    {
        defaultIn(node);
    }

    public void outAIfDecSemCasam(AIfDecSemCasam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfDecSemCasam(AIfDecSemCasam node)
    {
        inAIfDecSemCasam(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getExprRelacional() != null)
        {
            node.getExprRelacional().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAIfDecSemCasam(node);
    }

    public void inAIfcontDecSemCasam(AIfcontDecSemCasam node)
    {
        defaultIn(node);
    }

    public void outAIfcontDecSemCasam(AIfcontDecSemCasam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfcontDecSemCasam(AIfcontDecSemCasam node)
    {
        inAIfcontDecSemCasam(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getExprRelacional() != null)
        {
            node.getExprRelacional().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getDecCasam() != null)
        {
            node.getDecCasam().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getDecSemCasam() != null)
        {
            node.getDecSemCasam().apply(this);
        }
        outAIfcontDecSemCasam(node);
    }

    public void inAFatorExpr(AFatorExpr node)
    {
        defaultIn(node);
    }

    public void outAFatorExpr(AFatorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorExpr(AFatorExpr node)
    {
        inAFatorExpr(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorExpr(node);
    }

    public void inASomaExpr(ASomaExpr node)
    {
        defaultIn(node);
    }

    public void outASomaExpr(ASomaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExpr(ASomaExpr node)
    {
        inASomaExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outASomaExpr(node);
    }

    public void inAMenosExpr(AMenosExpr node)
    {
        defaultIn(node);
    }

    public void outAMenosExpr(AMenosExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpr(AMenosExpr node)
    {
        inAMenosExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAMenosExpr(node);
    }

    public void inARelacionalFator(ARelacionalFator node)
    {
        defaultIn(node);
    }

    public void outARelacionalFator(ARelacionalFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacionalFator(ARelacionalFator node)
    {
        inARelacionalFator(node);
        if(node.getExprRelacional() != null)
        {
            node.getExprRelacional().apply(this);
        }
        outARelacionalFator(node);
    }

    public void inAMultiFator(AMultiFator node)
    {
        defaultIn(node);
    }

    public void outAMultiFator(AMultiFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiFator(AMultiFator node)
    {
        inAMultiFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMultiplicacao() != null)
        {
            node.getMultiplicacao().apply(this);
        }
        if(node.getExprRelacional() != null)
        {
            node.getExprRelacional().apply(this);
        }
        outAMultiFator(node);
    }

    public void inADivFator(ADivFator node)
    {
        defaultIn(node);
    }

    public void outADivFator(ADivFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFator(ADivFator node)
    {
        inADivFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getDivisao() != null)
        {
            node.getDivisao().apply(this);
        }
        if(node.getExprRelacional() != null)
        {
            node.getExprRelacional().apply(this);
        }
        outADivFator(node);
    }

    public void inAModFator(AModFator node)
    {
        defaultIn(node);
    }

    public void outAModFator(AModFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFator(AModFator node)
    {
        inAModFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getExprRelacional() != null)
        {
            node.getExprRelacional().apply(this);
        }
        outAModFator(node);
    }

    public void inALogicaExprRelacional(ALogicaExprRelacional node)
    {
        defaultIn(node);
    }

    public void outALogicaExprRelacional(ALogicaExprRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicaExprRelacional(ALogicaExprRelacional node)
    {
        inALogicaExprRelacional(node);
        if(node.getExprLogica() != null)
        {
            node.getExprLogica().apply(this);
        }
        outALogicaExprRelacional(node);
    }

    public void inAComparacaoExprRelacional(AComparacaoExprRelacional node)
    {
        defaultIn(node);
    }

    public void outAComparacaoExprRelacional(AComparacaoExprRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparacaoExprRelacional(AComparacaoExprRelacional node)
    {
        inAComparacaoExprRelacional(node);
        if(node.getExprRelacional() != null)
        {
            node.getExprRelacional().apply(this);
        }
        if(node.getOpComp() != null)
        {
            node.getOpComp().apply(this);
        }
        if(node.getExprLogica() != null)
        {
            node.getExprLogica().apply(this);
        }
        outAComparacaoExprRelacional(node);
    }

    public void inATermoExprLogica(ATermoExprLogica node)
    {
        defaultIn(node);
    }

    public void outATermoExprLogica(ATermoExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExprLogica(ATermoExprLogica node)
    {
        inATermoExprLogica(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoExprLogica(node);
    }

    public void inALogicaExprLogica(ALogicaExprLogica node)
    {
        defaultIn(node);
    }

    public void outALogicaExprLogica(ALogicaExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicaExprLogica(ALogicaExprLogica node)
    {
        inALogicaExprLogica(node);
        if(node.getExprLogica() != null)
        {
            node.getExprLogica().apply(this);
        }
        if(node.getOpLogica() != null)
        {
            node.getOpLogica().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outALogicaExprLogica(node);
    }

    public void inANeglogicaExprLogica(ANeglogicaExprLogica node)
    {
        defaultIn(node);
    }

    public void outANeglogicaExprLogica(ANeglogicaExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeglogicaExprLogica(ANeglogicaExprLogica node)
    {
        inANeglogicaExprLogica(node);
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outANeglogicaExprLogica(node);
    }

    public void inACaractereTermo(ACaractereTermo node)
    {
        defaultIn(node);
    }

    public void outACaractereTermo(ACaractereTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTermo(ACaractereTermo node)
    {
        inACaractereTermo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereTermo(node);
    }

    public void inANumeroTermo(ANumeroTermo node)
    {
        defaultIn(node);
    }

    public void outANumeroTermo(ANumeroTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroTermo(ANumeroTermo node)
    {
        inANumeroTermo(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumeroTermo(node);
    }

    public void inABooleanoTermo(ABooleanoTermo node)
    {
        defaultIn(node);
    }

    public void outABooleanoTermo(ABooleanoTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoTermo(ABooleanoTermo node)
    {
        inABooleanoTermo(node);
        if(node.getBooleano() != null)
        {
            node.getBooleano().apply(this);
        }
        outABooleanoTermo(node);
    }

    public void inAVarTermo(AVarTermo node)
    {
        defaultIn(node);
    }

    public void outAVarTermo(AVarTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarTermo(AVarTermo node)
    {
        inAVarTermo(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarTermo(node);
    }

    public void inAChamadaTermo(AChamadaTermo node)
    {
        defaultIn(node);
    }

    public void outAChamadaTermo(AChamadaTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaTermo(AChamadaTermo node)
    {
        inAChamadaTermo(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAChamadaTermo(node);
    }

    public void inAParTermo(AParTermo node)
    {
        defaultIn(node);
    }

    public void outAParTermo(AParTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParTermo(AParTermo node)
    {
        inAParTermo(node);
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        outAParTermo(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVar(node);
    }

    public void inAVetorVar(AVetorVar node)
    {
        defaultIn(node);
    }

    public void outAVetorVar(AVetorVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVar(AVetorVar node)
    {
        inAVetorVar(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getAbreColchete() != null)
        {
            node.getAbreColchete().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getFechaColchete() != null)
        {
            node.getFechaColchete().apply(this);
        }
        outAVetorVar(node);
    }

    public void inAFuncaoChamada(AFuncaoChamada node)
    {
        defaultIn(node);
    }

    public void outAFuncaoChamada(AFuncaoChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoChamada(AFuncaoChamada node)
    {
        inAFuncaoChamada(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getListaExpr() != null)
        {
            node.getListaExpr().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        outAFuncaoChamada(node);
    }

    public void inAVazioListaExpr(AVazioListaExpr node)
    {
        defaultIn(node);
    }

    public void outAVazioListaExpr(AVazioListaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioListaExpr(AVazioListaExpr node)
    {
        inAVazioListaExpr(node);
        outAVazioListaExpr(node);
    }

    public void inAExpressaoListaExpr(AExpressaoListaExpr node)
    {
        defaultIn(node);
    }

    public void outAExpressaoListaExpr(AExpressaoListaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoListaExpr(AExpressaoListaExpr node)
    {
        inAExpressaoListaExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExpressaoListaExpr(node);
    }

    public void inAExpressaomaisListaExpr(AExpressaomaisListaExpr node)
    {
        defaultIn(node);
    }

    public void outAExpressaomaisListaExpr(AExpressaomaisListaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaomaisListaExpr(AExpressaomaisListaExpr node)
    {
        inAExpressaomaisListaExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getBarraReta() != null)
        {
            node.getBarraReta().apply(this);
        }
        if(node.getListaExpr() != null)
        {
            node.getListaExpr().apply(this);
        }
        outAExpressaomaisListaExpr(node);
    }

    public void inARetornevazioAuxRetorne(ARetornevazioAuxRetorne node)
    {
        defaultIn(node);
    }

    public void outARetornevazioAuxRetorne(ARetornevazioAuxRetorne node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetornevazioAuxRetorne(ARetornevazioAuxRetorne node)
    {
        inARetornevazioAuxRetorne(node);
        if(node.getRetorne() != null)
        {
            node.getRetorne().apply(this);
        }
        outARetornevazioAuxRetorne(node);
    }

    public void inARetorneexpAuxRetorne(ARetorneexpAuxRetorne node)
    {
        defaultIn(node);
    }

    public void outARetorneexpAuxRetorne(ARetorneexpAuxRetorne node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetorneexpAuxRetorne(ARetorneexpAuxRetorne node)
    {
        inARetorneexpAuxRetorne(node);
        if(node.getRetorne() != null)
        {
            node.getRetorne().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outARetorneexpAuxRetorne(node);
    }

    public void inAMenorqueOpComp(AMenorqueOpComp node)
    {
        defaultIn(node);
    }

    public void outAMenorqueOpComp(AMenorqueOpComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorqueOpComp(AMenorqueOpComp node)
    {
        inAMenorqueOpComp(node);
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        outAMenorqueOpComp(node);
    }

    public void inAMaiorqueOpComp(AMaiorqueOpComp node)
    {
        defaultIn(node);
    }

    public void outAMaiorqueOpComp(AMaiorqueOpComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorqueOpComp(AMaiorqueOpComp node)
    {
        inAMaiorqueOpComp(node);
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        outAMaiorqueOpComp(node);
    }

    public void inAMaiorigualOpComp(AMaiorigualOpComp node)
    {
        defaultIn(node);
    }

    public void outAMaiorigualOpComp(AMaiorigualOpComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorigualOpComp(AMaiorigualOpComp node)
    {
        inAMaiorigualOpComp(node);
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        outAMaiorigualOpComp(node);
    }

    public void inAMenorigualOpComp(AMenorigualOpComp node)
    {
        defaultIn(node);
    }

    public void outAMenorigualOpComp(AMenorigualOpComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorigualOpComp(AMenorigualOpComp node)
    {
        inAMenorigualOpComp(node);
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        outAMenorigualOpComp(node);
    }

    public void inAIgualdadeOpComp(AIgualdadeOpComp node)
    {
        defaultIn(node);
    }

    public void outAIgualdadeOpComp(AIgualdadeOpComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualdadeOpComp(AIgualdadeOpComp node)
    {
        inAIgualdadeOpComp(node);
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        outAIgualdadeOpComp(node);
    }

    public void inAOuOpLogica(AOuOpLogica node)
    {
        defaultIn(node);
    }

    public void outAOuOpLogica(AOuOpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuOpLogica(AOuOpLogica node)
    {
        inAOuOpLogica(node);
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        outAOuOpLogica(node);
    }

    public void inAEOpLogica(AEOpLogica node)
    {
        defaultIn(node);
    }

    public void outAEOpLogica(AEOpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEOpLogica(AEOpLogica node)
    {
        inAEOpLogica(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAEOpLogica(node);
    }

    public void inATipovazioTipoRetorno(ATipovazioTipoRetorno node)
    {
        defaultIn(node);
    }

    public void outATipovazioTipoRetorno(ATipovazioTipoRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipovazioTipoRetorno(ATipovazioTipoRetorno node)
    {
        inATipovazioTipoRetorno(node);
        if(node.getTipoVazio() != null)
        {
            node.getTipoVazio().apply(this);
        }
        outATipovazioTipoRetorno(node);
    }

    public void inATipobaseTipoRetorno(ATipobaseTipoRetorno node)
    {
        defaultIn(node);
    }

    public void outATipobaseTipoRetorno(ATipobaseTipoRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipobaseTipoRetorno(ATipobaseTipoRetorno node)
    {
        inATipobaseTipoRetorno(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipobaseTipoRetorno(node);
    }

    public void inAAuxatribAuxListaAtrib(AAuxatribAuxListaAtrib node)
    {
        defaultIn(node);
    }

    public void outAAuxatribAuxListaAtrib(AAuxatribAuxListaAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAuxatribAuxListaAtrib(AAuxatribAuxListaAtrib node)
    {
        inAAuxatribAuxListaAtrib(node);
        if(node.getListaAtrib() != null)
        {
            node.getListaAtrib().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAAuxatribAuxListaAtrib(node);
    }

    public void inAAuxidAuxId(AAuxidAuxId node)
    {
        defaultIn(node);
    }

    public void outAAuxidAuxId(AAuxidAuxId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAuxidAuxId(AAuxidAuxId node)
    {
        inAAuxidAuxId(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        outAAuxidAuxId(node);
    }

    public void inATiponumeroTipoBase(ATiponumeroTipoBase node)
    {
        defaultIn(node);
    }

    public void outATiponumeroTipoBase(ATiponumeroTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATiponumeroTipoBase(ATiponumeroTipoBase node)
    {
        inATiponumeroTipoBase(node);
        if(node.getTipoNumero() != null)
        {
            node.getTipoNumero().apply(this);
        }
        outATiponumeroTipoBase(node);
    }

    public void inATipocaractereTipoBase(ATipocaractereTipoBase node)
    {
        defaultIn(node);
    }

    public void outATipocaractereTipoBase(ATipocaractereTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipocaractereTipoBase(ATipocaractereTipoBase node)
    {
        inATipocaractereTipoBase(node);
        if(node.getTipoCaractere() != null)
        {
            node.getTipoCaractere().apply(this);
        }
        outATipocaractereTipoBase(node);
    }

    public void inATipobooleanoTipoBase(ATipobooleanoTipoBase node)
    {
        defaultIn(node);
    }

    public void outATipobooleanoTipoBase(ATipobooleanoTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipobooleanoTipoBase(ATipobooleanoTipoBase node)
    {
        inATipobooleanoTipoBase(node);
        if(node.getTipoBooleano() != null)
        {
            node.getTipoBooleano().apply(this);
        }
        outATipobooleanoTipoBase(node);
    }
}
