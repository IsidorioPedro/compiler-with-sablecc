/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class ARetorneComando extends PComando
{
    private PAuxRetorne _auxRetorne_;
    private TPonto _ponto_;

    public ARetorneComando()
    {
        // Constructor
    }

    public ARetorneComando(
        @SuppressWarnings("hiding") PAuxRetorne _auxRetorne_,
        @SuppressWarnings("hiding") TPonto _ponto_)
    {
        // Constructor
        setAuxRetorne(_auxRetorne_);

        setPonto(_ponto_);

    }

    @Override
    public Object clone()
    {
        return new ARetorneComando(
            cloneNode(this._auxRetorne_),
            cloneNode(this._ponto_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARetorneComando(this);
    }

    public PAuxRetorne getAuxRetorne()
    {
        return this._auxRetorne_;
    }

    public void setAuxRetorne(PAuxRetorne node)
    {
        if(this._auxRetorne_ != null)
        {
            this._auxRetorne_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._auxRetorne_ = node;
    }

    public TPonto getPonto()
    {
        return this._ponto_;
    }

    public void setPonto(TPonto node)
    {
        if(this._ponto_ != null)
        {
            this._ponto_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ponto_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._auxRetorne_)
            + toString(this._ponto_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._auxRetorne_ == child)
        {
            this._auxRetorne_ = null;
            return;
        }

        if(this._ponto_ == child)
        {
            this._ponto_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._auxRetorne_ == oldChild)
        {
            setAuxRetorne((PAuxRetorne) newChild);
            return;
        }

        if(this._ponto_ == oldChild)
        {
            setPonto((TPonto) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
