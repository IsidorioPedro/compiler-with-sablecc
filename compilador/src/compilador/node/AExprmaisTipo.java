/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class AExprmaisTipo extends PTipo
{
    private TAbreColchete _abreColchete_;
    private PExpr _expr_;
    private TFechaColchete _fechaColchete_;
    private PTipo _tipo_;

    public AExprmaisTipo()
    {
        // Constructor
    }

    public AExprmaisTipo(
        @SuppressWarnings("hiding") TAbreColchete _abreColchete_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TFechaColchete _fechaColchete_,
        @SuppressWarnings("hiding") PTipo _tipo_)
    {
        // Constructor
        setAbreColchete(_abreColchete_);

        setExpr(_expr_);

        setFechaColchete(_fechaColchete_);

        setTipo(_tipo_);

    }

    @Override
    public Object clone()
    {
        return new AExprmaisTipo(
            cloneNode(this._abreColchete_),
            cloneNode(this._expr_),
            cloneNode(this._fechaColchete_),
            cloneNode(this._tipo_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExprmaisTipo(this);
    }

    public TAbreColchete getAbreColchete()
    {
        return this._abreColchete_;
    }

    public void setAbreColchete(TAbreColchete node)
    {
        if(this._abreColchete_ != null)
        {
            this._abreColchete_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._abreColchete_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TFechaColchete getFechaColchete()
    {
        return this._fechaColchete_;
    }

    public void setFechaColchete(TFechaColchete node)
    {
        if(this._fechaColchete_ != null)
        {
            this._fechaColchete_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fechaColchete_ = node;
    }

    public PTipo getTipo()
    {
        return this._tipo_;
    }

    public void setTipo(PTipo node)
    {
        if(this._tipo_ != null)
        {
            this._tipo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tipo_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._abreColchete_)
            + toString(this._expr_)
            + toString(this._fechaColchete_)
            + toString(this._tipo_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._abreColchete_ == child)
        {
            this._abreColchete_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._fechaColchete_ == child)
        {
            this._fechaColchete_ = null;
            return;
        }

        if(this._tipo_ == child)
        {
            this._tipo_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._abreColchete_ == oldChild)
        {
            setAbreColchete((TAbreColchete) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._fechaColchete_ == oldChild)
        {
            setFechaColchete((TFechaColchete) newChild);
            return;
        }

        if(this._tipo_ == oldChild)
        {
            setTipo((PTipo) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
