/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.parser;

import compilador.lexer.*;
import compilador.node.*;
import compilador.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprograma1Programa */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAprograma2Programa */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAprograma3Programa */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAprograma4Programa */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce AAdecvariavel1DecVariavel */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AAdecvariavel2DecVariavel */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce AListaNomes */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce ABaseTipo */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AVetorTipo */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce AExpEntreColchetes */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce ANumeroTipoBase */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list);
            }
            break;
            case 11: /* reduce ACaractereTipoBase */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list);
            }
            break;
            case 12: /* reduce ABooleanoTipoBase */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce AFuncao$NaoVazio1DecFuncao */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list);
            }
            break;
            case 14: /* reduce AFuncao$Vazio1DecFuncao */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list);
            }
            break;
            case 15: /* reduce AFuncaoIncial$NaoVazio1DecFuncao */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list);
            }
            break;
            case 16: /* reduce AFuncaoIncial$Vazio1DecFuncao */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce AParametro */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce AAparamparametros1Parametros */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list);
            }
            break;
            case 19: /* reduce AAparamparametros2Parametros */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list);
            }
            break;
            case 20: /* reduce AEmptyParametros */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list);
            }
            break;
            case 21: /* reduce AMultiplosParametros */
            {
                ArrayList<Object> list = new21();
                push(goTo(9), list);
            }
            break;
            case 22: /* reduce AAbloco1Bloco */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list);
            }
            break;
            case 23: /* reduce AAbloco2Bloco */
            {
                ArrayList<Object> list = new23();
                push(goTo(10), list);
            }
            break;
            case 24: /* reduce AAbloco3Bloco */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list);
            }
            break;
            case 25: /* reduce AAbloco4Bloco */
            {
                ArrayList<Object> list = new25();
                push(goTo(10), list);
            }
            break;
            case 26: /* reduce AAtrib */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list);
            }
            break;
            case 27: /* reduce AAlistaatrib1ListaAtrib */
            {
                ArrayList<Object> list = new27();
                push(goTo(12), list);
            }
            break;
            case 28: /* reduce AAlistaatrib2ListaAtrib */
            {
                ArrayList<Object> list = new28();
                push(goTo(12), list);
            }
            break;
            case 29: /* reduce AMultiplosAtributos */
            {
                ArrayList<Object> list = new29();
                push(goTo(13), list);
            }
            break;
            case 30: /* reduce AComandoCasamComando */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list);
            }
            break;
            case 31: /* reduce AComandoSemCasamComando */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list);
            }
            break;
            case 32: /* reduce ASeSenaoComandoCasam */
            {
                ArrayList<Object> list = new32();
                push(goTo(15), list);
            }
            break;
            case 33: /* reduce AAtribuicaoComandoCasam */
            {
                ArrayList<Object> list = new33();
                push(goTo(15), list);
            }
            break;
            case 34: /* reduce AAretornecomandocasam1ComandoCasam */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list);
            }
            break;
            case 35: /* reduce AAretornecomandocasam2ComandoCasam */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list);
            }
            break;
            case 36: /* reduce ABlocoComandoCasam */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list);
            }
            break;
            case 37: /* reduce AChamadaComandoCasam */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list);
            }
            break;
            case 38: /* reduce ASeComandoSemCasam */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list);
            }
            break;
            case 39: /* reduce ASeSenaoComandoSemCasam */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list);
            }
            break;
            case 40: /* reduce AEnquantoComandoSemCasam */
            {
                ArrayList<Object> list = new40();
                push(goTo(16), list);
            }
            break;
            case 41: /* reduce AParaComandoSemCasam */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list);
            }
            break;
            case 42: /* reduce AParaCadaComandoSemCasam */
            {
                ArrayList<Object> list = new42();
                push(goTo(16), list);
            }
            break;
            case 43: /* reduce AIdentificadorVar */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list);
            }
            break;
            case 44: /* reduce AVariavelVar */
            {
                ArrayList<Object> list = new44();
                push(goTo(17), list);
            }
            break;
            case 45: /* reduce AEExpressaoLogica */
            {
                ArrayList<Object> list = new45();
                push(goTo(18), list);
            }
            break;
            case 46: /* reduce AOuExpressaoLogica */
            {
                ArrayList<Object> list = new46();
                push(goTo(18), list);
            }
            break;
            case 47: /* reduce ANaoExpressaoLogica */
            {
                ArrayList<Object> list = new47();
                push(goTo(18), list);
            }
            break;
            case 48: /* reduce ARelacionalExpressaoLogica */
            {
                ArrayList<Object> list = new48();
                push(goTo(18), list);
            }
            break;
            case 49: /* reduce AIgualExpressaoRelacional */
            {
                ArrayList<Object> list = new49();
                push(goTo(19), list);
            }
            break;
            case 50: /* reduce AMaiorExpressaoRelacional */
            {
                ArrayList<Object> list = new50();
                push(goTo(19), list);
            }
            break;
            case 51: /* reduce AMenorExpressaoRelacional */
            {
                ArrayList<Object> list = new51();
                push(goTo(19), list);
            }
            break;
            case 52: /* reduce AMaiorIgualExpressaoRelacional */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list);
            }
            break;
            case 53: /* reduce AMenorIgualExpressaoRelacional */
            {
                ArrayList<Object> list = new53();
                push(goTo(19), list);
            }
            break;
            case 54: /* reduce AAritmeticaExpressaoRelacional */
            {
                ArrayList<Object> list = new54();
                push(goTo(19), list);
            }
            break;
            case 55: /* reduce ASomaExpressaoAritmetica */
            {
                ArrayList<Object> list = new55();
                push(goTo(20), list);
            }
            break;
            case 56: /* reduce ASubtracaoExpressaoAritmetica */
            {
                ArrayList<Object> list = new56();
                push(goTo(20), list);
            }
            break;
            case 57: /* reduce ATermoExpressaoAritmetica */
            {
                ArrayList<Object> list = new57();
                push(goTo(20), list);
            }
            break;
            case 58: /* reduce AMultiplicacaoTermoAritmetico */
            {
                ArrayList<Object> list = new58();
                push(goTo(21), list);
            }
            break;
            case 59: /* reduce ADivisaoTermoAritmetico */
            {
                ArrayList<Object> list = new59();
                push(goTo(21), list);
            }
            break;
            case 60: /* reduce AFatorTermoAritmetico */
            {
                ArrayList<Object> list = new60();
                push(goTo(21), list);
            }
            break;
            case 61: /* reduce AParenteseAritmeticaFatorAritmetico */
            {
                ArrayList<Object> list = new61();
                push(goTo(22), list);
            }
            break;
            case 62: /* reduce AVariavelFatorAritmetico */
            {
                ArrayList<Object> list = new62();
                push(goTo(22), list);
            }
            break;
            case 63: /* reduce ANumeroFatorAritmetico */
            {
                ArrayList<Object> list = new63();
                push(goTo(22), list);
            }
            break;
            case 64: /* reduce ABooleanoFatorAritmetico */
            {
                ArrayList<Object> list = new64();
                push(goTo(22), list);
            }
            break;
            case 65: /* reduce AChamadaFatorAritmetico */
            {
                ArrayList<Object> list = new65();
                push(goTo(22), list);
            }
            break;
            case 66: /* reduce ACaractereFatorAritmetico */
            {
                ArrayList<Object> list = new66();
                push(goTo(22), list);
            }
            break;
            case 67: /* reduce ATextoFatorAritmetico */
            {
                ArrayList<Object> list = new67();
                push(goTo(22), list);
            }
            break;
            case 68: /* reduce APositivoNumeroComSinal */
            {
                ArrayList<Object> list = new68();
                push(goTo(23), list);
            }
            break;
            case 69: /* reduce ANegativoNumeroComSinal */
            {
                ArrayList<Object> list = new69();
                push(goTo(23), list);
            }
            break;
            case 70: /* reduce AExpLogicaExp */
            {
                ArrayList<Object> list = new70();
                push(goTo(24), list);
            }
            break;
            case 71: /* reduce AChamada */
            {
                ArrayList<Object> list = new71();
                push(goTo(25), list);
            }
            break;
            case 72: /* reduce AAargslistaexp1ListaExp */
            {
                ArrayList<Object> list = new72();
                push(goTo(26), list);
            }
            break;
            case 73: /* reduce AAargslistaexp2ListaExp */
            {
                ArrayList<Object> list = new73();
                push(goTo(26), list);
            }
            break;
            case 74: /* reduce AEmptyListaExp */
            {
                ArrayList<Object> list = new74();
                push(goTo(26), list);
            }
            break;
            case 75: /* reduce AMultiplosExp */
            {
                ArrayList<Object> list = new75();
                push(goTo(27), list);
            }
            break;
            case 76: /* reduce ATerminal$DecVariavel */
            {
                ArrayList<Object> list = new76();
                push(goTo(28), list);
            }
            break;
            case 77: /* reduce ANonTerminal$DecVariavel */
            {
                ArrayList<Object> list = new77();
                push(goTo(28), list);
            }
            break;
            case 78: /* reduce ATerminal$DecFuncao */
            {
                ArrayList<Object> list = new78();
                push(goTo(29), list);
            }
            break;
            case 79: /* reduce ANonTerminal$DecFuncao */
            {
                ArrayList<Object> list = new79();
                push(goTo(29), list);
            }
            break;
            case 80: /* reduce ATerminal$ListaNomes */
            {
                ArrayList<Object> list = new80();
                push(goTo(30), list);
            }
            break;
            case 81: /* reduce ANonTerminal$ListaNomes */
            {
                ArrayList<Object> list = new81();
                push(goTo(30), list);
            }
            break;
            case 82: /* reduce ATerminal$ExpEntreColchetes */
            {
                ArrayList<Object> list = new82();
                push(goTo(31), list);
            }
            break;
            case 83: /* reduce ANonTerminal$ExpEntreColchetes */
            {
                ArrayList<Object> list = new83();
                push(goTo(31), list);
            }
            break;
            case 84: /* reduce ATerminal$MultiplosParametros */
            {
                ArrayList<Object> list = new84();
                push(goTo(32), list);
            }
            break;
            case 85: /* reduce ANonTerminal$MultiplosParametros */
            {
                ArrayList<Object> list = new85();
                push(goTo(32), list);
            }
            break;
            case 86: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new86();
                push(goTo(33), list);
            }
            break;
            case 87: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new87();
                push(goTo(33), list);
            }
            break;
            case 88: /* reduce ATerminal$MultiplosAtributos */
            {
                ArrayList<Object> list = new88();
                push(goTo(34), list);
            }
            break;
            case 89: /* reduce ANonTerminal$MultiplosAtributos */
            {
                ArrayList<Object> list = new89();
                push(goTo(34), list);
            }
            break;
            case 90: /* reduce ATerminal$MultiplosExp */
            {
                ArrayList<Object> list = new90();
                push(goTo(35), list);
            }
            break;
            case 91: /* reduce ANonTerminal$MultiplosExp */
            {
                ArrayList<Object> list = new91();
                push(goTo(35), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprograma1Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pprogramaNode1 = new APrograma(listNode2, listNode3);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprograma2Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pprogramaNode1 = new APrograma(listNode3, listNode4);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAprograma3Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogramaNode1 = new APrograma(listNode2, listNode4);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAprograma4Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pprogramaNode1 = new APrograma(listNode3, listNode5);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAdecvariavel1DecVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecVariavel pdecvariavelNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        PVar pvarNode3;
        pvarNode3 = (PVar)nodeArrayList2.get(0);
	if(pvarNode3 != null)
	{
	  listNode4.add(pvarNode3);
	}
        }

        pdecvariavelNode1 = new ADecVariavelDecVariavel(ptipoNode2, listNode4);
        }
	nodeList.add(pdecvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAdecvariavel2DecVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecVariavel pdecvariavelNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        PVar pvarNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pvarNode3 = (PVar)nodeArrayList2.get(0);
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(pvarNode3 != null)
	{
	  listNode5.add(pvarNode3);
	}
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pdecvariavelNode1 = new ADecVariavelDecVariavel(ptipoNode2, listNode5);
        }
	nodeList.add(pdecvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AListaNomes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        pvarNode1 = (PVar)nodeArrayList2.get(0);
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ABaseTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);

        ptipoNode1 = new ATipoBaseTipo(ptipobaseNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AVetorTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        ptipobaseNode2 = (PTipoBase)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptipoNode1 = new ATipoVetorTipo(ptipobaseNode2, listNode4);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AExpEntreColchetes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ANumeroTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTipoNumero ttiponumeroNode2;
        ttiponumeroNode2 = (TTipoNumero)nodeArrayList1.get(0);

        ptipobaseNode1 = new ANumeroTipoBase(ttiponumeroNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ACaractereTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTipoCaractere ttipocaractereNode2;
        ttipocaractereNode2 = (TTipoCaractere)nodeArrayList1.get(0);

        ptipobaseNode1 = new ACaractereTipoBase(ttipocaractereNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ABooleanoTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTipoBooleano ttipobooleanoNode2;
        ttipobooleanoNode2 = (TTipoBooleano)nodeArrayList1.get(0);

        ptipobaseNode1 = new ABooleanoTipoBase(ttipobooleanoNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AFuncao$NaoVazio1DecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecFuncao pdecfuncaoNode1;
        {
            // Block
        PTipoRetorno ptiporetornoNode2;
        TId tidNode4;
        PParametros pparametrosNode5;
        PBloco pblocoNode6;
        {
            // Block
        PTipo ptipoNode3;
        ptipoNode3 = (PTipo)nodeArrayList1.get(0);

        ptiporetornoNode2 = new ANaoVazioTipoRetorno(ptipoNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        pparametrosNode5 = (PParametros)nodeArrayList4.get(0);
        pblocoNode6 = (PBloco)nodeArrayList6.get(0);

        pdecfuncaoNode1 = new AComumDecFuncao(ptiporetornoNode2, tidNode4, pparametrosNode5, pblocoNode6);
        }
	nodeList.add(pdecfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AFuncao$Vazio1DecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecFuncao pdecfuncaoNode1;
        {
            // Block
        PTipoRetorno ptiporetornoNode2;
        TId tidNode4;
        PParametros pparametrosNode5;
        PBloco pblocoNode6;
        {
            // Block
        TTipoVazio ttipovazioNode3;
        ttipovazioNode3 = (TTipoVazio)nodeArrayList1.get(0);

        ptiporetornoNode2 = new AVazioTipoRetorno(ttipovazioNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        pparametrosNode5 = (PParametros)nodeArrayList4.get(0);
        pblocoNode6 = (PBloco)nodeArrayList6.get(0);

        pdecfuncaoNode1 = new AComumDecFuncao(ptiporetornoNode2, tidNode4, pparametrosNode5, pblocoNode6);
        }
	nodeList.add(pdecfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AFuncaoIncial$NaoVazio1DecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecFuncao pdecfuncaoNode1;
        {
            // Block
        PTipoRetorno ptiporetornoNode2;
        TId tidNode4;
        PParametros pparametrosNode5;
        PBloco pblocoNode6;
        {
            // Block
        PTipo ptipoNode3;
        ptipoNode3 = (PTipo)nodeArrayList2.get(0);

        ptiporetornoNode2 = new ANaoVazioTipoRetorno(ptipoNode3);
        }
        tidNode4 = (TId)nodeArrayList3.get(0);
        pparametrosNode5 = (PParametros)nodeArrayList5.get(0);
        pblocoNode6 = (PBloco)nodeArrayList7.get(0);

        pdecfuncaoNode1 = new AInicialDecFuncao(ptiporetornoNode2, tidNode4, pparametrosNode5, pblocoNode6);
        }
	nodeList.add(pdecfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AFuncaoIncial$Vazio1DecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecFuncao pdecfuncaoNode1;
        {
            // Block
        PTipoRetorno ptiporetornoNode2;
        TId tidNode4;
        PParametros pparametrosNode5;
        PBloco pblocoNode6;
        {
            // Block
        TTipoVazio ttipovazioNode3;
        ttipovazioNode3 = (TTipoVazio)nodeArrayList2.get(0);

        ptiporetornoNode2 = new AVazioTipoRetorno(ttipovazioNode3);
        }
        tidNode4 = (TId)nodeArrayList3.get(0);
        pparametrosNode5 = (PParametros)nodeArrayList5.get(0);
        pblocoNode6 = (PBloco)nodeArrayList7.get(0);

        pdecfuncaoNode1 = new AInicialDecFuncao(ptiporetornoNode2, tidNode4, pparametrosNode5, pblocoNode6);
        }
	nodeList.add(pdecfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparametroNode1 = new AParametroParametro(ptipoNode2, tidNode3);
        }
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAparamparametros1Parametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametros pparametrosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PParametro pparametroNode2;
        pparametroNode2 = (PParametro)nodeArrayList1.get(0);
	if(pparametroNode2 != null)
	{
	  listNode3.add(pparametroNode2);
	}
        }

        pparametrosNode1 = new AParamParametros(listNode3);
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAparamparametros2Parametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametros pparametrosNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PParametro pparametroNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pparametroNode2 = (PParametro)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(pparametroNode2 != null)
	{
	  listNode4.add(pparametroNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparametrosNode1 = new AParamParametros(listNode4);
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AEmptyParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PParametros pparametrosNode1;
        {
            // Block

        pparametrosNode1 = new AEmptyParametros();
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AMultiplosParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        pparametroNode1 = (PParametro)nodeArrayList2.get(0);
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAbloco1Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pblocoNode1 = new ABlocoBloco(listNode2, listNode3);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAbloco2Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pblocoNode1 = new ABlocoBloco(listNode3, listNode4);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAbloco3Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pblocoNode1 = new ABlocoBloco(listNode2, listNode4);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAbloco4Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pblocoNode1 = new ABlocoBloco(listNode3, listNode5);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAtrib */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtrib patribNode1;
        {
            // Block
        PVar pvarNode2;
        PExp pexpNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        patribNode1 = new AAtribAtrib(pvarNode2, pexpNode3);
        }
	nodeList.add(patribNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAlistaatrib1ListaAtrib */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaAtrib plistaatribNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PAtrib patribNode2;
        patribNode2 = (PAtrib)nodeArrayList1.get(0);
	if(patribNode2 != null)
	{
	  listNode3.add(patribNode2);
	}
        }

        plistaatribNode1 = new AListaAtribListaAtrib(listNode3);
        }
	nodeList.add(plistaatribNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAlistaatrib2ListaAtrib */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaAtrib plistaatribNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PAtrib patribNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        patribNode2 = (PAtrib)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(patribNode2 != null)
	{
	  listNode4.add(patribNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plistaatribNode1 = new AListaAtribListaAtrib(listNode4);
        }
	nodeList.add(plistaatribNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AMultiplosAtributos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtrib patribNode1;
        patribNode1 = (PAtrib)nodeArrayList2.get(0);
	nodeList.add(patribNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AComandoCasamComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AComandoSemCasamComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ASeSenaoComandoCasam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        PComando pcomandoNode3;
        PComando pcomandoNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcomandoNode3 = (PComando)nodeArrayList5.get(0);
        pcomandoNode4 = (PComando)nodeArrayList7.get(0);

        pcomandoNode1 = new ASeSenaoComando(pexpNode2, pcomandoNode3, pcomandoNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAtribuicaoComandoCasam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PAtrib patribNode2;
        patribNode2 = (PAtrib)nodeArrayList1.get(0);

        pcomandoNode1 = new AAtribuicaoComando(patribNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAretornecomandocasam1ComandoCasam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pcomandoNode1 = new ARetorneComando(null);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAretornecomandocasam2ComandoCasam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pcomandoNode1 = new ARetorneComando(pexpNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ABlocoComandoCasam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PBloco pblocoNode2;
        pblocoNode2 = (PBloco)nodeArrayList1.get(0);

        pcomandoNode1 = new ABlocoComando(pblocoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AChamadaComandoCasam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PChamada pchamadaNode2;
        pchamadaNode2 = (PChamada)nodeArrayList1.get(0);

        pcomandoNode1 = new AChamadaComando(pchamadaNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ASeComandoSemCasam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        PComando pcomandoNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcomandoNode3 = (PComando)nodeArrayList5.get(0);

        pcomandoNode1 = new ASeComando(pexpNode2, pcomandoNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ASeSenaoComandoSemCasam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        PComando pcomandoNode3;
        PComando pcomandoNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcomandoNode3 = (PComando)nodeArrayList5.get(0);
        pcomandoNode4 = (PComando)nodeArrayList7.get(0);

        pcomandoNode1 = new ASeSenaoComando(pexpNode2, pcomandoNode3, pcomandoNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AEnquantoComandoSemCasam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        PComando pcomandoNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcomandoNode3 = (PComando)nodeArrayList5.get(0);

        pcomandoNode1 = new AEnquantoComando(pexpNode2, pcomandoNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AParaComandoSemCasam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PListaAtrib plistaatribNode2;
        PExp pexpNode3;
        PListaAtrib plistaatribNode4;
        PComando pcomandoNode5;
        plistaatribNode2 = (PListaAtrib)nodeArrayList3.get(0);
        pexpNode3 = (PExp)nodeArrayList5.get(0);
        plistaatribNode4 = (PListaAtrib)nodeArrayList7.get(0);
        pcomandoNode5 = (PComando)nodeArrayList9.get(0);

        pcomandoNode1 = new AParaComando(plistaatribNode2, pexpNode3, plistaatribNode4, pcomandoNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AParaCadaComandoSemCasam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        TId tidNode4;
        PComando pcomandoNode5;
        ptipoNode2 = (PTipo)nodeArrayList3.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        tidNode4 = (TId)nodeArrayList6.get(0);
        pcomandoNode5 = (PComando)nodeArrayList8.get(0);

        pcomandoNode1 = new AParaCadaComando(ptipoNode2, tidNode3, tidNode4, pcomandoNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AIdentificadorVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdentificadorVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AVariavelVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pvarNode1 = new AVariavelVar(tidNode2, listNode4);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AEExpressaoLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AEExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AOuExpressaoLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOuExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ANaoExpressaoLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANaoExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ARelacionalExpressaoLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AIgualExpressaoRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AIgualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AMaiorExpressaoRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMaiorExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AMenorExpressaoRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMenorExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AMaiorIgualExpressaoRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMaiorIgualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AMenorIgualExpressaoRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMenorIgualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAritmeticaExpressaoRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ASomaExpressaoAritmetica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ASomaExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ASubtracaoExpressaoAritmetica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ASubtracaoExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ATermoExpressaoAritmetica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AMultiplicacaoTermoAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultiplicacaoExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ADivisaoTermoAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivisaoExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AFatorTermoAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AParenteseAritmeticaFatorAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AVariavelFatorAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexpNode1 = new AVariavelExp(pvarNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ANumeroFatorAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PNumeroComSinal pnumerocomsinalNode2;
        pnumerocomsinalNode2 = (PNumeroComSinal)nodeArrayList1.get(0);

        pexpNode1 = new ANumeroExp(pnumerocomsinalNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ABooleanoFatorAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TBooleano tbooleanoNode2;
        tbooleanoNode2 = (TBooleano)nodeArrayList1.get(0);

        pexpNode1 = new ABooleanoExp(tbooleanoNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AChamadaFatorAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PChamada pchamadaNode2;
        pchamadaNode2 = (PChamada)nodeArrayList1.get(0);

        pexpNode1 = new AChamadaExp(pchamadaNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ACaractereFatorAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        pexpNode1 = new ACaractereExp(tcaractereNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ATextoFatorAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TTexto ttextoNode2;
        ttextoNode2 = (TTexto)nodeArrayList1.get(0);

        pexpNode1 = new ATextoExp(ttextoNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce APositivoNumeroComSinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumeroComSinal pnumerocomsinalNode1;
        {
            // Block
        TNumero tnumeroNode2;
        tnumeroNode2 = (TNumero)nodeArrayList1.get(0);

        pnumerocomsinalNode1 = new APositivoNumeroComSinal(tnumeroNode2);
        }
	nodeList.add(pnumerocomsinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ANegativoNumeroComSinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumeroComSinal pnumerocomsinalNode1;
        {
            // Block
        TNumero tnumeroNode2;
        tnumeroNode2 = (TNumero)nodeArrayList2.get(0);

        pnumerocomsinalNode1 = new ANegativoNumeroComSinal(tnumeroNode2);
        }
	nodeList.add(pnumerocomsinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AExpLogicaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AChamada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamada pchamadaNode1;
        {
            // Block
        TId tidNode2;
        PListaExp plistaexpNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        plistaexpNode3 = (PListaExp)nodeArrayList3.get(0);

        pchamadaNode1 = new AChamadaChamada(tidNode2, plistaexpNode3);
        }
	nodeList.add(pchamadaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AAargslistaexp1ListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaExp plistaexpNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }

        plistaexpNode1 = new AListaExpListaExp(listNode3);
        }
	nodeList.add(plistaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AAargslistaexp2ListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaExp plistaexpNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(pexpNode2 != null)
	{
	  listNode4.add(pexpNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plistaexpNode1 = new AListaExpListaExp(listNode4);
        }
	nodeList.add(plistaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AEmptyListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListaExp plistaexpNode1;
        {
            // Block

        plistaexpNode1 = new AEmptyListaExp();
        }
	nodeList.add(plistaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AMultiplosExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ATerminal$DecVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecVariavel pdecvariavelNode1;
        pdecvariavelNode1 = (PDecVariavel)nodeArrayList1.get(0);
	if(pdecvariavelNode1 != null)
	{
	  listNode2.add(pdecvariavelNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ANonTerminal$DecVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDecVariavel pdecvariavelNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdecvariavelNode2 = (PDecVariavel)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdecvariavelNode2 != null)
	{
	  listNode3.add(pdecvariavelNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ATerminal$DecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecFuncao pdecfuncaoNode1;
        pdecfuncaoNode1 = (PDecFuncao)nodeArrayList1.get(0);
	if(pdecfuncaoNode1 != null)
	{
	  listNode2.add(pdecfuncaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ANonTerminal$DecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDecFuncao pdecfuncaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdecfuncaoNode2 = (PDecFuncao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdecfuncaoNode2 != null)
	{
	  listNode3.add(pdecfuncaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ATerminal$ListaNomes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVar pvarNode1;
        pvarNode1 = (PVar)nodeArrayList1.get(0);
	if(pvarNode1 != null)
	{
	  listNode2.add(pvarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ANonTerminal$ListaNomes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVar pvarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvarNode2 = (PVar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvarNode2 != null)
	{
	  listNode3.add(pvarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ATerminal$ExpEntreColchetes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ANonTerminal$ExpEntreColchetes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ATerminal$MultiplosParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParametro pparametroNode1;
        pparametroNode1 = (PParametro)nodeArrayList1.get(0);
	if(pparametroNode1 != null)
	{
	  listNode2.add(pparametroNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ANonTerminal$MultiplosParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParametro pparametroNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparametroNode2 = (PParametro)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparametroNode2 != null)
	{
	  listNode3.add(pparametroNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComando pcomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ATerminal$MultiplosAtributos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAtrib patribNode1;
        patribNode1 = (PAtrib)nodeArrayList1.get(0);
	if(patribNode1 != null)
	{
	  listNode2.add(patribNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ANonTerminal$MultiplosAtributos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAtrib patribNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        patribNode2 = (PAtrib)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(patribNode2 != null)
	{
	  listNode3.add(patribNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ATerminal$MultiplosExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ANonTerminal$MultiplosExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {3, SHIFT, 2}, {4, SHIFT, 3}, {5, SHIFT, 4}, {6, SHIFT, 5}, {7, SHIFT, 6}, },
			{{-1, ERROR, 1}, {3, SHIFT, 2}, {4, SHIFT, 3}, {5, SHIFT, 4}, {6, SHIFT, 5}, {7, SHIFT, 14}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 5}, {3, SHIFT, 2}, {4, SHIFT, 3}, {5, SHIFT, 4}, },
			{{-1, ERROR, 6}, {41, SHIFT, 17}, },
			{{-1, ERROR, 7}, {42, ACCEPT, -1}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 9}, {41, SHIFT, 18}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {3, SHIFT, 2}, {4, SHIFT, 3}, {5, SHIFT, 4}, {6, SHIFT, 5}, {7, SHIFT, 6}, },
			{{-1, REDUCE, 2}, {0, SHIFT, 1}, {3, SHIFT, 2}, {4, SHIFT, 3}, {5, SHIFT, 4}, {6, SHIFT, 5}, {7, SHIFT, 6}, },
			{{-1, ERROR, 14}, {41, SHIFT, 24}, },
			{{-1, ERROR, 15}, {41, SHIFT, 25}, },
			{{-1, ERROR, 16}, {21, SHIFT, 26}, },
			{{-1, ERROR, 17}, {19, SHIFT, 29}, },
			{{-1, REDUCE, 43}, {19, SHIFT, 30}, {21, SHIFT, 26}, },
			{{-1, ERROR, 19}, {14, SHIFT, 32}, {16, SHIFT, 33}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 1}, {3, SHIFT, 2}, {4, SHIFT, 3}, {5, SHIFT, 4}, {6, SHIFT, 5}, {7, SHIFT, 6}, },
			{{-1, ERROR, 22}, {41, SHIFT, 36}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 24}, {19, SHIFT, 37}, },
			{{-1, ERROR, 25}, {19, SHIFT, 38}, },
			{{-1, ERROR, 26}, {19, SHIFT, 39}, {24, SHIFT, 40}, {36, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 8}, {21, SHIFT, 26}, },
			{{-1, REDUCE, 20}, {3, SHIFT, 2}, {4, SHIFT, 3}, {5, SHIFT, 4}, {6, SHIFT, 5}, },
			{{-1, REDUCE, 20}, {3, SHIFT, 2}, {4, SHIFT, 3}, {5, SHIFT, 4}, {6, SHIFT, 5}, },
			{{-1, REDUCE, 44}, {21, SHIFT, 26}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 33}, {41, SHIFT, 61}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 35}, {14, SHIFT, 63}, {16, SHIFT, 33}, },
			{{-1, ERROR, 36}, {19, SHIFT, 30}, },
			{{-1, REDUCE, 20}, {3, SHIFT, 2}, {4, SHIFT, 3}, {5, SHIFT, 4}, {6, SHIFT, 5}, },
			{{-1, REDUCE, 20}, {3, SHIFT, 2}, {4, SHIFT, 3}, {5, SHIFT, 4}, {6, SHIFT, 5}, },
			{{-1, ERROR, 39}, {19, SHIFT, 39}, {24, SHIFT, 40}, {36, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, ERROR, 40}, {39, SHIFT, 68}, },
			{{-1, ERROR, 41}, {19, SHIFT, 39}, {24, SHIFT, 40}, {36, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 43}, {19, SHIFT, 70}, {21, SHIFT, 26}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 48}, {34, SHIFT, 71}, {35, SHIFT, 72}, },
			{{-1, REDUCE, 54}, {28, SHIFT, 73}, {29, SHIFT, 74}, {30, SHIFT, 75}, {32, SHIFT, 76}, {33, SHIFT, 77}, },
			{{-1, REDUCE, 57}, {23, SHIFT, 78}, {24, SHIFT, 79}, },
			{{-1, REDUCE, 60}, {25, SHIFT, 80}, {26, SHIFT, 81}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 54}, {22, SHIFT, 82}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 57}, {41, SHIFT, 83}, },
			{{-1, REDUCE, 18}, {18, SHIFT, 84}, },
			{{-1, ERROR, 59}, {20, SHIFT, 87}, },
			{{-1, ERROR, 60}, {20, SHIFT, 88}, },
			{{-1, REDUCE, 43}, {21, SHIFT, 26}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 65}, {20, SHIFT, 89}, },
			{{-1, ERROR, 66}, {20, SHIFT, 90}, },
			{{-1, ERROR, 67}, {20, SHIFT, 91}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 74}, {19, SHIFT, 39}, {24, SHIFT, 40}, {36, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, ERROR, 71}, {19, SHIFT, 39}, {24, SHIFT, 40}, {36, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, ERROR, 72}, {19, SHIFT, 39}, {24, SHIFT, 40}, {36, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, ERROR, 73}, {19, SHIFT, 39}, {24, SHIFT, 40}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, ERROR, 74}, {19, SHIFT, 39}, {24, SHIFT, 40}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, ERROR, 75}, {19, SHIFT, 39}, {24, SHIFT, 40}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, ERROR, 76}, {19, SHIFT, 39}, {24, SHIFT, 40}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, ERROR, 77}, {19, SHIFT, 39}, {24, SHIFT, 40}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, ERROR, 78}, {19, SHIFT, 39}, {24, SHIFT, 40}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, ERROR, 79}, {19, SHIFT, 39}, {24, SHIFT, 40}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, ERROR, 80}, {19, SHIFT, 39}, {24, SHIFT, 40}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, ERROR, 81}, {19, SHIFT, 39}, {24, SHIFT, 40}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 84}, {3, SHIFT, 2}, {4, SHIFT, 3}, {5, SHIFT, 4}, {6, SHIFT, 5}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 19}, {18, SHIFT, 84}, },
			{{-1, ERROR, 87}, {1, SHIFT, 107}, },
			{{-1, ERROR, 88}, {1, SHIFT, 107}, },
			{{-1, ERROR, 89}, {1, SHIFT, 107}, },
			{{-1, ERROR, 90}, {1, SHIFT, 107}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 72}, {18, SHIFT, 112}, },
			{{-1, ERROR, 93}, {20, SHIFT, 115}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 107}, {1, SHIFT, 107}, {2, SHIFT, 116}, {3, SHIFT, 2}, {4, SHIFT, 3}, {5, SHIFT, 4}, {6, SHIFT, 5}, {8, SHIFT, 117}, {10, SHIFT, 118}, {11, SHIFT, 119}, {12, SHIFT, 120}, {13, SHIFT, 121}, {41, SHIFT, 46}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 112}, {19, SHIFT, 39}, {24, SHIFT, 40}, {36, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 73}, {18, SHIFT, 112}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 117}, {19, SHIFT, 134}, },
			{{-1, ERROR, 118}, {19, SHIFT, 135}, },
			{{-1, ERROR, 119}, {19, SHIFT, 136}, },
			{{-1, ERROR, 120}, {19, SHIFT, 137}, },
			{{-1, ERROR, 121}, {14, SHIFT, 138}, {19, SHIFT, 39}, {24, SHIFT, 40}, {36, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, ERROR, 122}, {41, SHIFT, 61}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 124}, {14, SHIFT, 140}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 128}, {31, SHIFT, 141}, },
			{{-1, ERROR, 129}, {14, SHIFT, 142}, },
			{{-1, ERROR, 130}, {1, SHIFT, 107}, {2, SHIFT, 143}, {3, SHIFT, 2}, {4, SHIFT, 3}, {5, SHIFT, 4}, {6, SHIFT, 5}, {8, SHIFT, 117}, {10, SHIFT, 118}, {11, SHIFT, 119}, {12, SHIFT, 120}, {13, SHIFT, 121}, {41, SHIFT, 46}, },
			{{-1, ERROR, 131}, {1, SHIFT, 107}, {2, SHIFT, 145}, {8, SHIFT, 117}, {10, SHIFT, 118}, {11, SHIFT, 119}, {12, SHIFT, 120}, {13, SHIFT, 121}, {41, SHIFT, 46}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 134}, {19, SHIFT, 39}, {24, SHIFT, 40}, {36, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, ERROR, 135}, {41, SHIFT, 61}, },
			{{-1, ERROR, 136}, {3, SHIFT, 2}, {4, SHIFT, 3}, {5, SHIFT, 4}, {6, SHIFT, 5}, },
			{{-1, ERROR, 137}, {19, SHIFT, 39}, {24, SHIFT, 40}, {36, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 139}, {14, SHIFT, 152}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 141}, {19, SHIFT, 39}, {24, SHIFT, 40}, {36, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 144}, {1, SHIFT, 107}, {2, SHIFT, 154}, {8, SHIFT, 117}, {10, SHIFT, 118}, {11, SHIFT, 119}, {12, SHIFT, 120}, {13, SHIFT, 121}, {41, SHIFT, 46}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 147}, {20, SHIFT, 155}, },
			{{-1, REDUCE, 27}, {16, SHIFT, 156}, },
			{{-1, ERROR, 149}, {17, SHIFT, 159}, },
			{{-1, ERROR, 150}, {41, SHIFT, 160}, },
			{{-1, ERROR, 151}, {20, SHIFT, 161}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 155}, {1, SHIFT, 107}, {8, SHIFT, 117}, {10, SHIFT, 118}, {11, SHIFT, 119}, {12, SHIFT, 120}, {13, SHIFT, 121}, {41, SHIFT, 46}, },
			{{-1, ERROR, 156}, {41, SHIFT, 61}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 28}, {16, SHIFT, 156}, },
			{{-1, ERROR, 159}, {19, SHIFT, 39}, {24, SHIFT, 40}, {36, SHIFT, 41}, {37, SHIFT, 42}, {38, SHIFT, 43}, {39, SHIFT, 44}, {40, SHIFT, 45}, {41, SHIFT, 46}, },
			{{-1, ERROR, 160}, {15, SHIFT, 167}, },
			{{-1, ERROR, 161}, {1, SHIFT, 107}, {8, SHIFT, 117}, {10, SHIFT, 118}, {11, SHIFT, 119}, {12, SHIFT, 120}, {13, SHIFT, 121}, {41, SHIFT, 46}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 30}, {9, SHIFT, 169}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 166}, {17, SHIFT, 170}, },
			{{-1, ERROR, 167}, {41, SHIFT, 171}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 169}, {1, SHIFT, 107}, {8, SHIFT, 117}, {10, SHIFT, 118}, {11, SHIFT, 119}, {12, SHIFT, 120}, {13, SHIFT, 121}, {41, SHIFT, 46}, },
			{{-1, ERROR, 170}, {41, SHIFT, 61}, },
			{{-1, ERROR, 171}, {20, SHIFT, 175}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 174}, {20, SHIFT, 176}, },
			{{-1, ERROR, 175}, {1, SHIFT, 107}, {8, SHIFT, 117}, {10, SHIFT, 118}, {11, SHIFT, 119}, {12, SHIFT, 120}, {13, SHIFT, 121}, {41, SHIFT, 46}, },
			{{-1, ERROR, 176}, {1, SHIFT, 107}, {8, SHIFT, 117}, {10, SHIFT, 118}, {11, SHIFT, 119}, {12, SHIFT, 120}, {13, SHIFT, 121}, {41, SHIFT, 46}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 41}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 7}, },
			{{-1, 8}, {12, 20}, {130, 20}, },
			{{-1, 34}, {35, 64}, },
			{{-1, 57}, {0, 9}, {1, 15}, {12, 9}, {13, 22}, {21, 22}, {107, 122}, {130, 122}, {136, 150}, },
			{{-1, 27}, {28, 56}, {31, 56}, },
			{{-1, 10}, {5, 16}, },
			{{-1, 11}, {13, 23}, {21, 23}, },
			{{-1, 58}, {84, 105}, },
			{{-1, 59}, {30, 60}, {37, 65}, {38, 66}, },
			{{-1, 85}, {86, 106}, },
			{{-1, 123}, {87, 108}, {88, 109}, {89, 110}, {90, 111}, },
			{{-1, 124}, {135, 148}, {156, 164}, {170, 148}, },
			{{-1, 149}, {170, 174}, },
			{{-1, 157}, {158, 165}, },
			{{-1, 125}, {131, 146}, {144, 146}, {155, 162}, {161, 168}, {175, 177}, {176, 178}, },
			{{-1, 126}, {155, 163}, {169, 172}, },
			{{-1, 127}, {169, 173}, },
			{{-1, 47}, {9, 19}, {33, 62}, {107, 128}, {122, 19}, {130, 128}, {131, 128}, {135, 128}, {144, 128}, {155, 128}, {156, 128}, {161, 128}, {169, 128}, {170, 128}, {175, 128}, {176, 128}, },
			{{-1, 48}, {39, 67}, {41, 69}, {71, 94}, {72, 95}, },
			{{-1, 49}, {73, 96}, {74, 97}, {75, 98}, {76, 99}, {77, 100}, },
			{{-1, 50}, {78, 101}, {79, 102}, },
			{{-1, 51}, {80, 103}, {81, 104}, },
			{{-1, 52}, },
			{{-1, 53}, },
			{{-1, 54}, {70, 92}, {112, 132}, {121, 139}, {134, 147}, {137, 151}, {141, 153}, {159, 166}, },
			{{-1, 55}, {107, 129}, {130, 129}, {131, 129}, {144, 129}, {155, 129}, {161, 129}, {169, 129}, {175, 129}, {176, 129}, },
			{{-1, 93}, },
			{{-1, 113}, {114, 133}, },
			{{-1, 12}, {107, 130}, },
			{{-1, 13}, {12, 21}, },
			{{-1, 35}, },
			{{-1, 31}, {16, 28}, },
			{{-1, 86}, },
			{{-1, 131}, {130, 144}, },
			{{-1, 158}, },
			{{-1, 114}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '->', 'caractere', 'numero', 'booleano', 'vetor', 'vazio', EOF",
			"expecting: 'caractere', 'numero', 'booleano', 'vetor', 'vazio'",
			"expecting: '[', id",
			"expecting: 'caractere', 'numero', 'booleano'",
			"expecting: id",
			"expecting: EOF",
			"expecting: '->', 'inicio', 'fim', 'caractere', 'numero', 'booleano', 'vetor', 'vazio', 'se', 'para', 'para cada', 'enquanto', 'retorne', id, EOF",
			"expecting: '['",
			"expecting: '('",
			"expecting: '.', ',', '(', '['",
			"expecting: '.', ','",
			"expecting: '(', '-', 'nao', caractere, texto, numero, booleano, id",
			"expecting: '.', ',', ';', '|', ')', '[', ']', '+', '-', '/', '*', '=', '>', '<', ':=', '>=', '<=', 'e', 'ou', id",
			"expecting: 'caractere', 'numero', 'booleano', 'vetor', ')'",
			"expecting: '.', ',', ';', '|', ')', '[', ']', '+', '-', '/', '*', '=', '>', '<', ':=', '>=', '<=', 'e', 'ou'",
			"expecting: numero",
			"expecting: '.', ',', ';', '|', ')', ']', '+', '-', '/', '*', '=', '>', '<', '>=', '<=', 'e', 'ou'",
			"expecting: '.', ',', ';', '|', '(', ')', '[', ']', '+', '-', '/', '*', '=', '>', '<', ':=', '>=', '<=', 'e', 'ou'",
			"expecting: '.', ',', ';', '|', ')', ']'",
			"expecting: '.', ',', ';', '|', ')', ']', 'e', 'ou'",
			"expecting: '.', ',', ';', '|', ')', ']', '=', '>', '<', '>=', '<=', 'e', 'ou'",
			"expecting: '.', ',', ';', '|', ')', ']', '+', '-', '=', '>', '<', '>=', '<=', 'e', 'ou'",
			"expecting: ']'",
			"expecting: '|', ')'",
			"expecting: ')'",
			"expecting: '.', ',', '[', ':='",
			"expecting: '(', ')', '-', 'nao', caractere, texto, numero, booleano, id",
			"expecting: '(', '-', caractere, texto, numero, booleano, id",
			"expecting: 'caractere', 'numero', 'booleano', 'vetor'",
			"expecting: 'inicio'",
			"expecting: 'inicio', 'fim', 'caractere', 'numero', 'booleano', 'vetor', 'se', 'para', 'para cada', 'enquanto', 'retorne', id",
			"expecting: '->', 'inicio', 'fim', 'caractere', 'numero', 'booleano', 'vetor', 'vazio', 'se', 'senao', 'para', 'para cada', 'enquanto', 'retorne', id, EOF",
			"expecting: '.', '(', '-', 'nao', caractere, texto, numero, booleano, id",
			"expecting: 'inicio', 'fim', 'se', 'senao', 'para', 'para cada', 'enquanto', 'retorne', id",
			"expecting: '.'",
			"expecting: 'inicio', 'fim', 'se', 'para', 'para cada', 'enquanto', 'retorne', id",
			"expecting: ':='",
			"expecting: ',', ';', ')'",
			"expecting: ';'",
			"expecting: '.', ',', ';', ')'",
			"expecting: 'inicio', 'se', 'para', 'para cada', 'enquanto', 'retorne', id",
			"expecting: ':'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 2, 3, 4, 5, 6, 4, 4, 0, 0, 0, 4, 4, 7, 8, 9, 10, 6, 0, 4, 0, 8, 8, 11, 12, 2, 13, 13, 14, 6, 4, 10, 10, 8, 13, 13, 11, 15, 11, 16, 16, 16, 16, 17, 16, 18, 19, 20, 21, 16, 16, 22, 16, 12, 4, 23, 24, 24, 25, 10, 6, 10, 24, 24, 24, 16, 18, 26, 11, 11, 27, 27, 27, 27, 27, 27, 27, 27, 27, 12, 23, 28, 23, 23, 29, 29, 29, 29, 16, 23, 24, 18, 18, 19, 19, 19, 19, 19, 20, 20, 21, 21, 23, 23, 30, 0, 0, 0, 0, 11, 23, 23, 16, 31, 8, 8, 8, 8, 32, 4, 33, 34, 35, 35, 35, 36, 34, 30, 35, 23, 23, 11, 4, 28, 11, 33, 34, 33, 11, 33, 31, 35, 31, 35, 24, 37, 38, 4, 24, 33, 39, 31, 40, 4, 37, 37, 11, 41, 40, 35, 33, 37, 37, 38, 4, 35, 40, 4, 24, 33, 35, 24, 40, 40, 35, 35, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
