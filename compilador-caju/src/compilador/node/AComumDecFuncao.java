/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import java.util.*;
import compilador.analysis.*;

@SuppressWarnings("nls")
public final class AComumDecFuncao extends PDecFuncao
{
    private PTipoRetorno _tipoRetorno_;
    private TId _id_;
    private final LinkedList<PParametro> _parametros_ = new LinkedList<PParametro>();
    private PBloco _bloco_;

    public AComumDecFuncao()
    {
        // Constructor
    }

    public AComumDecFuncao(
        @SuppressWarnings("hiding") PTipoRetorno _tipoRetorno_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") List<?> _parametros_,
        @SuppressWarnings("hiding") PBloco _bloco_)
    {
        // Constructor
        setTipoRetorno(_tipoRetorno_);

        setId(_id_);

        setParametros(_parametros_);

        setBloco(_bloco_);

    }

    @Override
    public Object clone()
    {
        return new AComumDecFuncao(
            cloneNode(this._tipoRetorno_),
            cloneNode(this._id_),
            cloneList(this._parametros_),
            cloneNode(this._bloco_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComumDecFuncao(this);
    }

    public PTipoRetorno getTipoRetorno()
    {
        return this._tipoRetorno_;
    }

    public void setTipoRetorno(PTipoRetorno node)
    {
        if(this._tipoRetorno_ != null)
        {
            this._tipoRetorno_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tipoRetorno_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public LinkedList<PParametro> getParametros()
    {
        return this._parametros_;
    }

    public void setParametros(List<?> list)
    {
        for(PParametro e : this._parametros_)
        {
            e.parent(null);
        }
        this._parametros_.clear();

        for(Object obj_e : list)
        {
            PParametro e = (PParametro) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._parametros_.add(e);
        }
    }

    public PBloco getBloco()
    {
        return this._bloco_;
    }

    public void setBloco(PBloco node)
    {
        if(this._bloco_ != null)
        {
            this._bloco_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bloco_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tipoRetorno_)
            + toString(this._id_)
            + toString(this._parametros_)
            + toString(this._bloco_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tipoRetorno_ == child)
        {
            this._tipoRetorno_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._parametros_.remove(child))
        {
            return;
        }

        if(this._bloco_ == child)
        {
            this._bloco_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tipoRetorno_ == oldChild)
        {
            setTipoRetorno((PTipoRetorno) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        for(ListIterator<PParametro> i = this._parametros_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PParametro) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._bloco_ == oldChild)
        {
            setBloco((PBloco) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
