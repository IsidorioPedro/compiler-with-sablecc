Package compilador;

Helpers
    ascii = [0 .. 127];  
    ht = 09; // Horizontal Tab
    lf = 10; // Line Feed
    cr = 13; // Carriage Return
    sp = 32; // Space

    eol = cr lf | cr | lf;
    caracteres = [ascii - [lf + cr]];
    
    minusculas = ['a' .. 'z'];
    maiusculas = ['A' .. 'Z'];
    letra = minusculas | maiusculas;
    digito = ['0' .. '9'];

    vacuo = (sp | ht | eol)+;
    
    sem_fecha_chave = [ascii - '}'];

    comentario_linha = '#' caracteres* eol;
    comentario_bloco = '{' sem_fecha_chave* '}';
    comentario = comentario_linha | comentario_bloco;

    caractere_multiplo = '\b' | '\t' | '\n' | '\f' | '\r' | '\"' | '\' ''' | '\\';
    caractere_singular = [caracteres - [''' + '\']];
    caractere_texto = [caracteres - ['"' + '\']] | caractere_multiplo;
 
Tokens
    /* tokens a serem ignorados */
    vacuo = vacuo;
    comentario = comentario;
    
    /* palavras reservadas */
    inicio_execucao = '->';
    inicio = 'inicio';
    fim = 'fim';
    
    tipo_caractere = 'caractere';
    tipo_numero = 'numero';
    tipo_booleano = 'booleano';
    tipo_vetor = 'vetor';
    tipo_vazio = 'vazio';
    
    se = 'se';
    senao = 'senao';
    para = 'para';
    para_cada = 'para cada';
    enquanto = 'enquanto';
    retorne = 'retorne';
    
    /* operadores e divisores */
    ponto = '.';
    dois_pontos = ':';
    virgula = ',';
    ponto_virgula = ';';
    barra_reta = '|';
    abre_parentese = '(';
    fecha_parentese = ')';
    abre_colchete = '[';
    fecha_colchete = ']';
    
    mais = '+';
    menos = '-';
    divisao = '/';
    multiplicacao = '*';
    mod = '%';
    
    igual = '=';
    maior = '>';
    menor = '<';
    atribuicao = ':=';
    maior_igual = '>=';
    menor_igual = '<=';

    e = 'e';
    ou = 'ou';
    nao = 'nao';
    
    /* procedimentos primitivos*/
    //ler = 'ler';
    //exibir = 'exibir';

    /* identificadores */
    caractere = ''' (caractere_singular | caractere_multiplo) ''';
    texto = '"' caractere_texto* '"';

    numero = '-'? digito+ | '-'? digito+ ',' digito+;
    
    booleano = 'verdadeiro' | 'falso';
    
	id = letra (letra | digito | '_')*;

Ignored Tokens
    comentario,
    vacuo;

Productions
    programa = dec_variavel* dec_funcao*;

    dec_variavel = tipo lista_nomes ponto;

    lista_nomes = id multiplos_ids*; 
    
    multiplos_ids = virgula id;
    
    tipo = 
    	{base} tipo_base |
    	{vetor} tipo_vetor tipo_base exp_entre_colchetes+;
    
    exp_entre_colchetes = abre_colchete exp fecha_colchete;
    
    tipo_base = 
    	{numero} tipo_numero |
    	{caractere} tipo_caractere |
    	{booleano} tipo_booleano;
    
  	dec_funcao = inicio_execucao? tipo_retorno id abre_parentese parametros fecha_parentese bloco;
	
	tipo_retorno =
		{nao_vazio} tipo |
		{vazio} tipo_vazio;
	
	parametro = tipo id;
	
	parametros = 
		{param} parametro multiplos_parametros* |
		{empity};
    
    multiplos_parametros = barra_reta parametro;
    
    bloco = inicio dec_variavel* comando* fim;
    
    atrib = var atribuicao exp;
    
    lista_atrib = atrib multiplos_atributos*; 

    multiplos_atributos = virgula atrib;

    comando = 
        {casado} casado |
        {nao_casado} nao_casado |
        {comando_simples} comando_simples;
    
	casado = {se_senao_casado} se abre_parentese exp fecha_parentese [esquerda]:casado senao [direita]:casado;
	
	nao_casado = 
        {se_nao_casado} se abre_parentese exp fecha_parentese comando |
        {se_senao_nao_casado} se abre_parentese exp fecha_parentese casado senao nao_casado;
	
	comando_simples = 
        {enquanto} enquanto abre_parentese exp fecha_parentese comando |
        {para} para abre_parentese [declaracao]:lista_atrib [a]:ponto_virgula [condicao]:exp [b]:ponto_virgula [interacao]:lista_atrib fecha_parentese comando |
        {para_cada} para_cada abre_parentese tipo [a]:id dois_pontos [b]:id fecha_parentese comando |
        {atribuicao} atrib ponto |
        {retorne} retorne exp? ponto |
        {bloco} bloco |
        {chamada} chamada ponto;
    
    var = 
        {identificador} id |
        {variavel} var abre_colchete exp fecha_colchete; 
	
    expressao_logica  = 
        {e} termo_logico e expressao_logica |
        {ou} termo_logico ou expressao_logica |
        {nao} nao expressao_logica |
        {termo} termo_logico;

    termo_logico = 
        {parentese_logica} abre_parentese expressao_logica fecha_parentese |
        {relacional} expressao_relacional;

    expressao_relacional = 
        {igual} [esquerda]:expressao_aritmetica igual [direita]:expressao_aritmetica |
        {maior} [esquerda]:expressao_aritmetica maior [direita]:expressao_aritmetica |
        {menor} [esquerda]:expressao_aritmetica menor [direita]:expressao_aritmetica |
        {maior_igual} [esquerda]:expressao_aritmetica maior_igual [direita]:expressao_aritmetica |
        {menor_igual} [esquerda]:expressao_aritmetica menor_igual [direita]:expressao_aritmetica;

    expressao_aritmetica = 
        {soma} termo_aritmetico mais expressao_aritmetica |
        {subtracao} termo_aritmetico menos expressao_aritmetica |
        {termo} termo_aritmetico ;

    termo_aritmetico = 
        {multiplicacao} fator_aritmetico multiplicacao termo_aritmetico |
        {divisao} fator_aritmetico divisao termo_aritmetico |
        {fator} fator_aritmetico;

    fator_aritmetico =
        {parentese_aritmetica} abre_parentese expressao_aritmetica fecha_parentese |
        {variavel} var |
        {numero} numero |
        {booleano} booleano |
        {chamada} chamada | 
        {caractere} caractere |
        {texto} texto;

    exp = 
        {exp_aritmetica} expressao_aritmetica |
        {exp_logica} expressao_logica;
    
    chamada = id abre_parentese lista_exp fecha_parentese;

    lista_exp = 
        {lista_exp} exp multiplos_exp* |
        {empity};
    
    multiplos_exp = barra_reta exp;