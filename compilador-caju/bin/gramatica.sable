Package compilador;

Helpers
    ascii = [0 .. 127];  
    ht = 09; // Horizontal Tab
    lf = 10; // Line Feed
    cr = 13; // Carriage Return
    sp = 32; // Space

    eol = cr lf | cr | lf;
    caracteres = [ascii - [lf + cr]];
    
    minusculas = ['a' .. 'z'];
    maiusculas = ['A' .. 'Z'];
    letra = minusculas | maiusculas;
    digito = ['0' .. '9'];

    vacuo = (sp | ht | eol)+;
    
    sem_fecha_chave = [ascii - '}'];

    comentario_linha = '#' caracteres* eol;
    comentario_bloco = '{' sem_fecha_chave* '}';
    comentario = comentario_linha | comentario_bloco;

    caractere_multiplo = '\b' | '\t' | '\n' | '\f' | '\r' | '\"' | '\' ''' | '\\';
    caractere_singular = [caracteres - [''' + '\']];
    caractere_texto = [caracteres - ['"' + '\']] | caractere_multiplo;
 
Tokens
    /* tokens a serem ignorados */
    vacuo = vacuo;
    comentario = comentario;
    
    /* palavras reservadas */
    inicio_execucao = '->';
    inicio = 'inicio';
    fim = 'fim';
    
    tipo_caractere = 'caractere';
    tipo_numero = 'numero';
    tipo_booleano = 'booleano';
    tipo_vetor = 'vetor';
    tipo_vazio = 'vazio';
    
    se = 'se';
    senao = 'senao';
    para = 'para';
    para_cada = 'para cada';
    enquanto = 'enquanto';
    retorne = 'retorne';
    
    /* operadores e divisores */
    ponto = '.';
    dois_pontos = ':';
    virgula = ',';
    ponto_virgula = ';';
    barra_reta = '|';
    abre_parentese = '(';
    fecha_parentese = ')';
    abre_colchete = '[';
    fecha_colchete = ']';
    
    mais = '+';
    menos = '-';
    divisao = '/';
    multiplicacao = '*';
    mod = '%';
    
    igual = '=';
    maior = '>';
    menor = '<';
    atribuicao = ':=';
    maior_igual = '>=';
    menor_igual = '<=';

    e = 'e';
    ou = 'ou';
    nao = 'nao';
    
    /* procedimentos primitivos*/
    //ler = 'ler';
    //exibir = 'exibir';

    /* identificadores */
    caractere = ''' (caractere_singular | caractere_multiplo) ''';
    texto = '"' caractere_texto* '"';

    numero = digito+ | digito+ ',' digito+;
    
    booleano = 'verdadeiro' | 'falso';
    
	id = letra (letra | digito | '_')*;

Ignored Tokens
    comentario,
    vacuo;

Productions
    programa {-> programa} = 
        dec_variavel* dec_funcao* {-> New programa([dec_variavel], [dec_funcao])};

    dec_variavel {-> dec_variavel} = 
        tipo var lista_nomes* ponto {-> New dec_variavel.dec_variavel(tipo.tipo, [var.var, lista_nomes.var])};

	lista_nomes {-> var} = 
        virgula var {-> var.var};
	
	/*
    lista_nomes {-> var} = 
        var multiplos_ids* {-> [var.var, multiplos_ids.var]};

    multiplos_ids {-> var}= 
        virgula var {-> var};
	*/
	
    tipo {-> tipo} = 
        {base} tipo_base {-> New tipo.tipo_base(tipo_base)} |
        {vetor} tipo_vetor tipo_base exp_entre_colchetes+ {-> New tipo.tipo_vetor(tipo_base, [exp_entre_colchetes.exp])};

    exp_entre_colchetes {-> exp} = 
        abre_colchete exp fecha_colchete {-> exp};

    tipo_base {-> tipo_base} = 
        {numero} tipo_numero {-> New tipo_base.numero(tipo_numero)} |
        {caractere} tipo_caractere {-> New tipo_base.caractere(tipo_caractere)} |
        {booleano} tipo_booleano {-> New tipo_base.booleano(tipo_booleano)};

    dec_funcao {-> dec_funcao} = 
        {funcao} tipo_retorno id abre_parentese parametros fecha_parentese bloco {-> New dec_funcao.comum(tipo_retorno, id, parametros, bloco)} | 
        {funcao_incial} inicio_execucao tipo_retorno id abre_parentese parametros fecha_parentese bloco {-> New dec_funcao.inicial(tipo_retorno, id, parametros, bloco)};

    tipo_retorno {-> tipo_retorno} = 
        {nao_vazio} tipo {-> New tipo_retorno.nao_vazio(tipo)} |
        {vazio} tipo_vazio {-> New tipo_retorno.vazio(tipo_vazio)};

    parametro {-> parametro} = 
        tipo id {-> New parametro.parametro(tipo, id)};

    parametros {-> parametros} = 
        {param} parametro multiplos_parametros* {-> New parametros.param([parametro.parametro, multiplos_parametros.parametro])} |
        {empty} {-> New parametros.empty()};

    multiplos_parametros {-> parametro} = 
        barra_reta parametro {-> parametro.parametro};

    bloco {-> bloco} = 
        inicio dec_variavel* comando* fim {-> New bloco.bloco([dec_variavel], [comando])};
    
    atrib {-> atrib} = 
        var atribuicao exp {-> New atrib.atrib(var, exp)};

    lista_atrib {-> lista_atrib} = 
        atrib multiplos_atributos* {-> New lista_atrib.lista_atrib([atrib.atrib, multiplos_atributos.atrib])};

    multiplos_atributos {-> atrib}  = 
        virgula atrib {-> atrib.atrib};

    comando {-> comando} = 
        {comando_casam} comando_casam {-> comando_casam.comando} |
        {comando_sem_casam} comando_sem_casam {-> comando_sem_casam.comando};

    comando_casam {-> comando} = 
        {se_senao} se abre_parentese exp fecha_parentese [esquerda]:comando_casam senao [direita]:comando_casam {-> New comando.se_senao(exp, esquerda.comando, direita.comando)} | 
        {atribuicao} atrib ponto {-> New comando.atribuicao(atrib)} |
        {retorne} retorne exp? ponto {-> New comando.retorne(exp)} |
        {bloco} bloco {-> New comando.bloco(bloco)} |
        {chamada} chamada ponto {-> New comando.chamada(chamada)};

    comando_sem_casam {-> comando} = 
        {se} se abre_parentese exp fecha_parentese comando {-> New comando.se(exp, comando)} | 
        {se_senao} se abre_parentese exp fecha_parentese comando_casam senao comando_sem_casam {-> New comando.se_senao(exp, comando_casam.comando, comando_sem_casam.comando)} |
        {enquanto} enquanto abre_parentese exp fecha_parentese comando {-> New comando.enquanto(exp, comando)} |
        {para} para abre_parentese [declaracao]:lista_atrib [a]:ponto_virgula [condicao]:exp [b]:ponto_virgula [interacao]:lista_atrib fecha_parentese comando {-> New comando.para(declaracao.lista_atrib, condicao.exp, interacao.lista_atrib, comando)} |
        {para_cada} para_cada abre_parentese tipo [a]:id dois_pontos [b]:id fecha_parentese comando {-> New comando.para_cada(tipo, a, b, comando)};

    var {-> var} = 
        {identificador} id {-> New var.identificador(id)} |
        {variavel} id exp_entre_colchetes+  {-> New var.variavel(id, [exp_entre_colchetes.exp])};
	
    expressao_logica {-> exp} = 
        {e} expressao_relacional e expressao_logica {-> New exp.e(expressao_relacional.exp, expressao_logica.exp)} |
        {ou} expressao_relacional ou expressao_logica {-> New exp.ou(expressao_relacional.exp, expressao_logica.exp)} |
        {nao} nao expressao_logica {-> New exp.nao(expressao_logica.exp)} |
        {relacional} expressao_relacional {-> expressao_relacional.exp};

    expressao_relacional {-> exp} = 
        {igual} [esquerda]:expressao_aritmetica igual [direita]:expressao_relacional {-> New exp.igual(esquerda.exp, direita.exp)} |
        {maior} [esquerda]:expressao_aritmetica maior [direita]:expressao_relacional {-> New exp.maior(esquerda.exp, direita.exp)} |
        {menor} [esquerda]:expressao_aritmetica menor [direita]:expressao_relacional {-> New exp.menor(esquerda.exp, direita.exp)} |
        {maior_igual} [esquerda]:expressao_aritmetica maior_igual [direita]:expressao_relacional {-> New exp.maior_igual(esquerda.exp, direita.exp)} |
        {menor_igual} [esquerda]:expressao_aritmetica menor_igual [direita]:expressao_relacional {-> New exp.menor_igual(esquerda.exp, direita.exp)} |
        {aritmetica} expressao_aritmetica {-> expressao_aritmetica.exp};

    expressao_aritmetica {-> exp} = 
        {soma} termo_aritmetico mais expressao_aritmetica {-> New exp.soma(termo_aritmetico.exp, expressao_aritmetica.exp)} |
        {subtracao} termo_aritmetico menos expressao_aritmetica {-> New exp.subtracao(termo_aritmetico.exp, expressao_aritmetica.exp)} |
        {termo} termo_aritmetico {-> termo_aritmetico.exp};

    termo_aritmetico {-> exp} = 
        {multiplicacao} fator_aritmetico multiplicacao termo_aritmetico {-> New exp.multiplicacao(fator_aritmetico.exp, termo_aritmetico.exp)} |
        {divisao} fator_aritmetico divisao termo_aritmetico {-> New exp.divisao(fator_aritmetico.exp, termo_aritmetico.exp)} |
        {fator} fator_aritmetico {-> fator_aritmetico.exp};

    fator_aritmetico {-> exp} = 
        {parentese_aritmetica} abre_parentese expressao_logica fecha_parentese {-> expressao_logica.exp} |
        {variavel} var {-> New exp.variavel(var)} |
        {numero} numero_com_sinal {-> New exp.numero(numero_com_sinal)} |
        {booleano} booleano {-> New exp.booleano(booleano)} |
        {chamada} chamada {-> New exp.chamada(chamada)} | 
        {caractere} caractere {-> New exp.caractere(caractere)} |
        {texto} texto {-> New exp.texto(texto)};

    numero_com_sinal {-> numero_com_sinal} = 
        {positivo} numero {-> New numero_com_sinal.positivo(numero)} |
        {negativo} menos numero {-> New numero_com_sinal.negativo(numero)};

    exp {-> exp} = 
        {exp_logica} expressao_logica {-> expressao_logica.exp};

    chamada {-> chamada} = 
        id abre_parentese lista_exp fecha_parentese {-> New chamada.chamada(id, lista_exp)};

    lista_exp {-> lista_exp} = 
        {args} exp multiplos_exp* {-> New lista_exp.lista_exp([exp, multiplos_exp.exp])} |
        {empty} {-> New lista_exp.empty()};

    multiplos_exp {-> exp} = 
        barra_reta exp {-> exp};

//---------------------------------------------------------------------------------------------------------------------------------------------------------
Abstract Syntax Tree
//---------------------------------------------------------------------------------------------------------------------------------------------------------
    programa = dec_variavel* dec_funcao*;

	dec_variavel = {dec_variavel} tipo [lista_nomes]:var+;
	
	dec_funcao = 
        {comum} tipo_retorno id parametros bloco | 
        {inicial} tipo_retorno id parametros bloco;

    parametros = 
        {param} [parametros]:parametro+ | 
        {empty};

    parametro = {parametro} tipo id;

    tipo = 
        {tipo_base} tipo_base | 
        {tipo_vetor} tipo_base exp+;     

    tipo_base = 
        {numero} tipo_numero | 
        {caractere} tipo_caractere | 
        {booleano} tipo_booleano;

    tipo_retorno = 
        {nao_vazio} tipo | 
        {vazio} tipo_vazio;

    var = 
        {identificador} id | 
        {variavel} id exp+;

    bloco = {bloco} dec_variavel* comando*;

    comando = 
        {se_senao} exp [esquerda]:comando [direita]:comando | 
        {se} exp comando | 
        {enquanto} exp comando | 
        {para} [esquerda]:lista_atrib exp [direita]:lista_atrib comando | 
        {para_cada} tipo [esquerda]:id [direita]:id comando | 
        {retorne} exp? | 
        {atribuicao} atrib | 
        {bloco} bloco | 
        {chamada} chamada;

    lista_atrib = {lista_atrib} atrib+;

    atrib = {atrib} var exp;

    chamada = {chamada} id lista_exp;

    lista_exp = 
        {lista_exp} exp+ | 
        {empty};

    numero_com_sinal = 
        {positivo} numero | 
        {negativo} numero;

    exp = 
        {e} [esquerda]:exp [direita]:exp | 
        {ou} [esquerda]:exp [direita]:exp | 
        {nao} exp |
        {igual} [esquerda]:exp [direita]:exp | 
        {menor} [esquerda]:exp [direita]:exp | 
        {maior} [esquerda]:exp [direita]:exp | 
        {menor_igual} [esquerda]:exp [direita]:exp | 
        {maior_igual} [esquerda]:exp [direita]:exp | 
        {soma} [esquerda]:exp [direita]:exp | 
        {subtracao} [esquerda]:exp [direita]:exp | 
        {multiplicacao} [esquerda]:exp [direita]:exp | 
        {divisao} [esquerda]:exp [direita]:exp | 
        {variavel} var | 
        {numero} numero_com_sinal  | 
        {booleano} booleano | 
        {caractere} caractere | 
        {texto} texto | 
        {chamada} chamada;